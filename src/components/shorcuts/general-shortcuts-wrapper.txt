// import { HotkeyCallback, Keys, useHotkeys, useHotkeysContext } from 'react-hotkeys-hook';
// import { OptionsOrDependencyArray } from 'react-hotkeys-hook/packages/react-hotkeys-hook/dist/types';
// import { useEffect } from 'react';

// type modeModule = 'payment' | 'transfer' | 'withdraw' | 'deposit' | 'general';

// type ShortcutDefinition = {
//     keys: Keys;
//     callback: HotkeyCallback;
//     options?: OptionsOrDependencyArray & { scopes?: string[] };
//     dependencies?: OptionsOrDependencyArray;
// };

// const MODULAR_SHORTCUTS: Record<string, ShortcutDefinition[]> = {
//     payment: [
//         {
//             keys: 'control+enter',
//             callback: (e) => {
//                 e.preventDefault();
//                 console.log('Payment shortcut triggered');
//             },
//             options: { enableOnFormTags: true, scopes: ['payment'] },
//         },
//         {
//             keys: 'shift+p',
//             callback: () => console.log('Payment mode - Shift + P'),
//             options: { scopes: ['payment'] }
//         }
//     ],
//     transfer: [
//         {
//             keys: 'control+enter',
//             callback: (e) => {
//                 e.preventDefault();
//                 console.log('Transfer shortcut triggered');
//             },
//             options: { scopes: ['transfer'] },
//         },
//     ],
//     general: [
//         {
//             keys: 'escape',
//             callback: () => console.log('Global - Escape'),
//             options: { scopes: ['*'] } // The '*' scope is a special wildcard that is always active.
//         },
//     ],
// };

// type GeneralShortcutsWrapperProps = {
//     mode: modeModule;
//     children?: React.ReactNode;
// };

// const GeneralShortcutsWrapper = ({ mode, children }: GeneralShortcutsWrapperProps) => {
//     const shortcutsForMode = MODULAR_SHORTCUTS[mode] || [];
    
//     // Get the scope activation functions from the context.
//     const { enableScope, disableScope } = useHotkeysContext();

//     useEffect(() => {
//         // When the component mounts, enable the specific scope.
//         enableScope(mode);
        
//         // Return a cleanup function to disable the scope when the component unmounts.
//         return () => {
//             disableScope(mode);
//         };
//     }, [mode, enableScope, disableScope]);

//     // Apply each hotkey with its defined scope.
//     shortcutsForMode.forEach(shortcut => {
//         useHotkeys(shortcut.keys, shortcut.callback, shortcut.options, shortcut.dependencies);
//     });

//     return <div>{children}</div>;
// };

// export default GeneralShortcutsWrapper;