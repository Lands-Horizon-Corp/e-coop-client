/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as OnboardingRouteImport } from './routes/onboarding/route';
import { Route as AuthRouteImport } from './routes/auth/route';
import { Route as AccountRouteImport } from './routes/account/route';
import { Route as landingRouteImport } from './routes/(landing)/route';
import { Route as AccountIndexImport } from './routes/account/index';
import { Route as landingIndexImport } from './routes/(landing)/index';
import { Route as AuthForgotPasswordImport } from './routes/auth/forgot-password';
import { Route as AccountSecurityImport } from './routes/account/security';
import { Route as AccountProfileImport } from './routes/account/profile';
import { Route as landingDevelopersImport } from './routes/(landing)/developers';
import { Route as landingContactImport } from './routes/(landing)/contact';
import { Route as landingAboutImport } from './routes/(landing)/about';
import { Route as OrgOrgnameRouteImport } from './routes/org/$orgname.route';
import { Route as AuthPasswordResetResetIdImport } from './routes/auth/password-reset.$resetId';
import { Route as AccountVerifyEmailImport } from './routes/account/verify/email';
import { Route as AccountVerifyContactImport } from './routes/account/verify/contact';
import { Route as OrgOrgnameBranchBranchnameRouteImport } from './routes/org/$orgname.branch.$branchname/route';
import { Route as OrgOrgnameBranchBranchnamecommonDashboardImport } from './routes/org/$orgname.branch.$branchname/(common)/dashboard';
import { Route as OrgOrgnameBranchBranchnamemaintenanceMemberMemberGenderImport } from './routes/org/$orgname.branch.$branchname/(maintenance)/member/member-gender';

// Create Virtual Routes

const AuthSignUpLazyImport = createFileRoute('/auth/sign-up')();
const AuthSignInLazyImport = createFileRoute('/auth/sign-in')();

// Create/Update Routes

const OnboardingRouteRoute = OnboardingRouteImport.update({
    id: '/onboarding',
    path: '/onboarding',
    getParentRoute: () => rootRoute,
} as any);

const AuthRouteRoute = AuthRouteImport.update({
    id: '/auth',
    path: '/auth',
    getParentRoute: () => rootRoute,
} as any);

const AccountRouteRoute = AccountRouteImport.update({
    id: '/account',
    path: '/account',
    getParentRoute: () => rootRoute,
} as any);

const landingRouteRoute = landingRouteImport.update({
    id: '/(landing)',
    getParentRoute: () => rootRoute,
} as any);

const AccountIndexRoute = AccountIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AccountRouteRoute,
} as any);

const landingIndexRoute = landingIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => landingRouteRoute,
} as any);

const AuthSignUpLazyRoute = AuthSignUpLazyImport.update({
    id: '/sign-up',
    path: '/sign-up',
    getParentRoute: () => AuthRouteRoute,
} as any).lazy(() => import('./routes/auth/sign-up.lazy').then((d) => d.Route));

const AuthSignInLazyRoute = AuthSignInLazyImport.update({
    id: '/sign-in',
    path: '/sign-in',
    getParentRoute: () => AuthRouteRoute,
} as any).lazy(() => import('./routes/auth/sign-in.lazy').then((d) => d.Route));

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
    id: '/forgot-password',
    path: '/forgot-password',
    getParentRoute: () => AuthRouteRoute,
} as any);

const AccountSecurityRoute = AccountSecurityImport.update({
    id: '/security',
    path: '/security',
    getParentRoute: () => AccountRouteRoute,
} as any);

const AccountProfileRoute = AccountProfileImport.update({
    id: '/profile',
    path: '/profile',
    getParentRoute: () => AccountRouteRoute,
} as any);

const landingDevelopersRoute = landingDevelopersImport.update({
    id: '/developers',
    path: '/developers',
    getParentRoute: () => landingRouteRoute,
} as any);

const landingContactRoute = landingContactImport.update({
    id: '/contact',
    path: '/contact',
    getParentRoute: () => landingRouteRoute,
} as any);

const landingAboutRoute = landingAboutImport.update({
    id: '/about',
    path: '/about',
    getParentRoute: () => landingRouteRoute,
} as any);

const OrgOrgnameRouteRoute = OrgOrgnameRouteImport.update({
    id: '/org/$orgname',
    path: '/org/$orgname',
    getParentRoute: () => rootRoute,
} as any);

const AuthPasswordResetResetIdRoute = AuthPasswordResetResetIdImport.update({
    id: '/password-reset/$resetId',
    path: '/password-reset/$resetId',
    getParentRoute: () => AuthRouteRoute,
} as any);

const AccountVerifyEmailRoute = AccountVerifyEmailImport.update({
    id: '/verify/email',
    path: '/verify/email',
    getParentRoute: () => AccountRouteRoute,
} as any);

const AccountVerifyContactRoute = AccountVerifyContactImport.update({
    id: '/verify/contact',
    path: '/verify/contact',
    getParentRoute: () => AccountRouteRoute,
} as any);

const OrgOrgnameBranchBranchnameRouteRoute =
    OrgOrgnameBranchBranchnameRouteImport.update({
        id: '/branch/$branchname',
        path: '/branch/$branchname',
        getParentRoute: () => OrgOrgnameRouteRoute,
    } as any);

const OrgOrgnameBranchBranchnamecommonDashboardRoute =
    OrgOrgnameBranchBranchnamecommonDashboardImport.update({
        id: '/(common)/dashboard',
        path: '/dashboard',
        getParentRoute: () => OrgOrgnameBranchBranchnameRouteRoute,
    } as any);

const OrgOrgnameBranchBranchnamemaintenanceMemberMemberGenderRoute =
    OrgOrgnameBranchBranchnamemaintenanceMemberMemberGenderImport.update({
        id: '/(maintenance)/member/member-gender',
        path: '/member/member-gender',
        getParentRoute: () => OrgOrgnameBranchBranchnameRouteRoute,
    } as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
    interface FileRoutesByPath {
        '/(landing)': {
            id: '/(landing)';
            path: '/';
            fullPath: '/';
            preLoaderRoute: typeof landingRouteImport;
            parentRoute: typeof rootRoute;
        };
        '/account': {
            id: '/account';
            path: '/account';
            fullPath: '/account';
            preLoaderRoute: typeof AccountRouteImport;
            parentRoute: typeof rootRoute;
        };
        '/auth': {
            id: '/auth';
            path: '/auth';
            fullPath: '/auth';
            preLoaderRoute: typeof AuthRouteImport;
            parentRoute: typeof rootRoute;
        };
        '/onboarding': {
            id: '/onboarding';
            path: '/onboarding';
            fullPath: '/onboarding';
            preLoaderRoute: typeof OnboardingRouteImport;
            parentRoute: typeof rootRoute;
        };
        '/org/$orgname': {
            id: '/org/$orgname';
            path: '/org/$orgname';
            fullPath: '/org/$orgname';
            preLoaderRoute: typeof OrgOrgnameRouteImport;
            parentRoute: typeof rootRoute;
        };
        '/(landing)/about': {
            id: '/(landing)/about';
            path: '/about';
            fullPath: '/about';
            preLoaderRoute: typeof landingAboutImport;
            parentRoute: typeof landingRouteImport;
        };
        '/(landing)/contact': {
            id: '/(landing)/contact';
            path: '/contact';
            fullPath: '/contact';
            preLoaderRoute: typeof landingContactImport;
            parentRoute: typeof landingRouteImport;
        };
        '/(landing)/developers': {
            id: '/(landing)/developers';
            path: '/developers';
            fullPath: '/developers';
            preLoaderRoute: typeof landingDevelopersImport;
            parentRoute: typeof landingRouteImport;
        };
        '/account/profile': {
            id: '/account/profile';
            path: '/profile';
            fullPath: '/account/profile';
            preLoaderRoute: typeof AccountProfileImport;
            parentRoute: typeof AccountRouteImport;
        };
        '/account/security': {
            id: '/account/security';
            path: '/security';
            fullPath: '/account/security';
            preLoaderRoute: typeof AccountSecurityImport;
            parentRoute: typeof AccountRouteImport;
        };
        '/auth/forgot-password': {
            id: '/auth/forgot-password';
            path: '/forgot-password';
            fullPath: '/auth/forgot-password';
            preLoaderRoute: typeof AuthForgotPasswordImport;
            parentRoute: typeof AuthRouteImport;
        };
        '/auth/sign-in': {
            id: '/auth/sign-in';
            path: '/sign-in';
            fullPath: '/auth/sign-in';
            preLoaderRoute: typeof AuthSignInLazyImport;
            parentRoute: typeof AuthRouteImport;
        };
        '/auth/sign-up': {
            id: '/auth/sign-up';
            path: '/sign-up';
            fullPath: '/auth/sign-up';
            preLoaderRoute: typeof AuthSignUpLazyImport;
            parentRoute: typeof AuthRouteImport;
        };
        '/(landing)/': {
            id: '/(landing)/';
            path: '/';
            fullPath: '/';
            preLoaderRoute: typeof landingIndexImport;
            parentRoute: typeof landingRouteImport;
        };
        '/account/': {
            id: '/account/';
            path: '/';
            fullPath: '/account/';
            preLoaderRoute: typeof AccountIndexImport;
            parentRoute: typeof AccountRouteImport;
        };
        '/account/verify/contact': {
            id: '/account/verify/contact';
            path: '/verify/contact';
            fullPath: '/account/verify/contact';
            preLoaderRoute: typeof AccountVerifyContactImport;
            parentRoute: typeof AccountRouteImport;
        };
        '/account/verify/email': {
            id: '/account/verify/email';
            path: '/verify/email';
            fullPath: '/account/verify/email';
            preLoaderRoute: typeof AccountVerifyEmailImport;
            parentRoute: typeof AccountRouteImport;
        };
        '/auth/password-reset/$resetId': {
            id: '/auth/password-reset/$resetId';
            path: '/password-reset/$resetId';
            fullPath: '/auth/password-reset/$resetId';
            preLoaderRoute: typeof AuthPasswordResetResetIdImport;
            parentRoute: typeof AuthRouteImport;
        };
        '/org/$orgname/branch/$branchname': {
            id: '/org/$orgname/branch/$branchname';
            path: '/branch/$branchname';
            fullPath: '/org/$orgname/branch/$branchname';
            preLoaderRoute: typeof OrgOrgnameBranchBranchnameRouteImport;
            parentRoute: typeof OrgOrgnameRouteImport;
        };
        '/org/$orgname/branch/$branchname/(common)/dashboard': {
            id: '/org/$orgname/branch/$branchname/(common)/dashboard';
            path: '/dashboard';
            fullPath: '/org/$orgname/branch/$branchname/dashboard';
            preLoaderRoute: typeof OrgOrgnameBranchBranchnamecommonDashboardImport;
            parentRoute: typeof OrgOrgnameBranchBranchnameRouteImport;
        };
        '/org/$orgname/branch/$branchname/(maintenance)/member/member-gender': {
            id: '/org/$orgname/branch/$branchname/(maintenance)/member/member-gender';
            path: '/member/member-gender';
            fullPath: '/org/$orgname/branch/$branchname/member/member-gender';
            preLoaderRoute: typeof OrgOrgnameBranchBranchnamemaintenanceMemberMemberGenderImport;
            parentRoute: typeof OrgOrgnameBranchBranchnameRouteImport;
        };
    }
}

// Create and export the route tree

interface landingRouteRouteChildren {
    landingAboutRoute: typeof landingAboutRoute;
    landingContactRoute: typeof landingContactRoute;
    landingDevelopersRoute: typeof landingDevelopersRoute;
    landingIndexRoute: typeof landingIndexRoute;
}

const landingRouteRouteChildren: landingRouteRouteChildren = {
    landingAboutRoute: landingAboutRoute,
    landingContactRoute: landingContactRoute,
    landingDevelopersRoute: landingDevelopersRoute,
    landingIndexRoute: landingIndexRoute,
};

const landingRouteRouteWithChildren = landingRouteRoute._addFileChildren(
    landingRouteRouteChildren
);

interface AccountRouteRouteChildren {
    AccountProfileRoute: typeof AccountProfileRoute;
    AccountSecurityRoute: typeof AccountSecurityRoute;
    AccountIndexRoute: typeof AccountIndexRoute;
    AccountVerifyContactRoute: typeof AccountVerifyContactRoute;
    AccountVerifyEmailRoute: typeof AccountVerifyEmailRoute;
}

const AccountRouteRouteChildren: AccountRouteRouteChildren = {
    AccountProfileRoute: AccountProfileRoute,
    AccountSecurityRoute: AccountSecurityRoute,
    AccountIndexRoute: AccountIndexRoute,
    AccountVerifyContactRoute: AccountVerifyContactRoute,
    AccountVerifyEmailRoute: AccountVerifyEmailRoute,
};

const AccountRouteRouteWithChildren = AccountRouteRoute._addFileChildren(
    AccountRouteRouteChildren
);

interface AuthRouteRouteChildren {
    AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute;
    AuthSignInLazyRoute: typeof AuthSignInLazyRoute;
    AuthSignUpLazyRoute: typeof AuthSignUpLazyRoute;
    AuthPasswordResetResetIdRoute: typeof AuthPasswordResetResetIdRoute;
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
    AuthForgotPasswordRoute: AuthForgotPasswordRoute,
    AuthSignInLazyRoute: AuthSignInLazyRoute,
    AuthSignUpLazyRoute: AuthSignUpLazyRoute,
    AuthPasswordResetResetIdRoute: AuthPasswordResetResetIdRoute,
};

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
    AuthRouteRouteChildren
);

interface OrgOrgnameBranchBranchnameRouteRouteChildren {
    OrgOrgnameBranchBranchnamecommonDashboardRoute: typeof OrgOrgnameBranchBranchnamecommonDashboardRoute;
    OrgOrgnameBranchBranchnamemaintenanceMemberMemberGenderRoute: typeof OrgOrgnameBranchBranchnamemaintenanceMemberMemberGenderRoute;
}

const OrgOrgnameBranchBranchnameRouteRouteChildren: OrgOrgnameBranchBranchnameRouteRouteChildren =
    {
        OrgOrgnameBranchBranchnamecommonDashboardRoute:
            OrgOrgnameBranchBranchnamecommonDashboardRoute,
        OrgOrgnameBranchBranchnamemaintenanceMemberMemberGenderRoute:
            OrgOrgnameBranchBranchnamemaintenanceMemberMemberGenderRoute,
    };

const OrgOrgnameBranchBranchnameRouteRouteWithChildren =
    OrgOrgnameBranchBranchnameRouteRoute._addFileChildren(
        OrgOrgnameBranchBranchnameRouteRouteChildren
    );

interface OrgOrgnameRouteRouteChildren {
    OrgOrgnameBranchBranchnameRouteRoute: typeof OrgOrgnameBranchBranchnameRouteRouteWithChildren;
}

const OrgOrgnameRouteRouteChildren: OrgOrgnameRouteRouteChildren = {
    OrgOrgnameBranchBranchnameRouteRoute:
        OrgOrgnameBranchBranchnameRouteRouteWithChildren,
};

const OrgOrgnameRouteRouteWithChildren = OrgOrgnameRouteRoute._addFileChildren(
    OrgOrgnameRouteRouteChildren
);

export interface FileRoutesByFullPath {
    '/': typeof landingIndexRoute;
    '/account': typeof AccountRouteRouteWithChildren;
    '/auth': typeof AuthRouteRouteWithChildren;
    '/onboarding': typeof OnboardingRouteRoute;
    '/org/$orgname': typeof OrgOrgnameRouteRouteWithChildren;
    '/about': typeof landingAboutRoute;
    '/contact': typeof landingContactRoute;
    '/developers': typeof landingDevelopersRoute;
    '/account/profile': typeof AccountProfileRoute;
    '/account/security': typeof AccountSecurityRoute;
    '/auth/forgot-password': typeof AuthForgotPasswordRoute;
    '/auth/sign-in': typeof AuthSignInLazyRoute;
    '/auth/sign-up': typeof AuthSignUpLazyRoute;
    '/account/': typeof AccountIndexRoute;
    '/account/verify/contact': typeof AccountVerifyContactRoute;
    '/account/verify/email': typeof AccountVerifyEmailRoute;
    '/auth/password-reset/$resetId': typeof AuthPasswordResetResetIdRoute;
    '/org/$orgname/branch/$branchname': typeof OrgOrgnameBranchBranchnameRouteRouteWithChildren;
    '/org/$orgname/branch/$branchname/dashboard': typeof OrgOrgnameBranchBranchnamecommonDashboardRoute;
    '/org/$orgname/branch/$branchname/member/member-gender': typeof OrgOrgnameBranchBranchnamemaintenanceMemberMemberGenderRoute;
}

export interface FileRoutesByTo {
    '/auth': typeof AuthRouteRouteWithChildren;
    '/onboarding': typeof OnboardingRouteRoute;
    '/org/$orgname': typeof OrgOrgnameRouteRouteWithChildren;
    '/about': typeof landingAboutRoute;
    '/contact': typeof landingContactRoute;
    '/developers': typeof landingDevelopersRoute;
    '/account/profile': typeof AccountProfileRoute;
    '/account/security': typeof AccountSecurityRoute;
    '/auth/forgot-password': typeof AuthForgotPasswordRoute;
    '/auth/sign-in': typeof AuthSignInLazyRoute;
    '/auth/sign-up': typeof AuthSignUpLazyRoute;
    '/': typeof landingIndexRoute;
    '/account': typeof AccountIndexRoute;
    '/account/verify/contact': typeof AccountVerifyContactRoute;
    '/account/verify/email': typeof AccountVerifyEmailRoute;
    '/auth/password-reset/$resetId': typeof AuthPasswordResetResetIdRoute;
    '/org/$orgname/branch/$branchname': typeof OrgOrgnameBranchBranchnameRouteRouteWithChildren;
    '/org/$orgname/branch/$branchname/dashboard': typeof OrgOrgnameBranchBranchnamecommonDashboardRoute;
    '/org/$orgname/branch/$branchname/member/member-gender': typeof OrgOrgnameBranchBranchnamemaintenanceMemberMemberGenderRoute;
}

export interface FileRoutesById {
    __root__: typeof rootRoute;
    '/(landing)': typeof landingRouteRouteWithChildren;
    '/account': typeof AccountRouteRouteWithChildren;
    '/auth': typeof AuthRouteRouteWithChildren;
    '/onboarding': typeof OnboardingRouteRoute;
    '/org/$orgname': typeof OrgOrgnameRouteRouteWithChildren;
    '/(landing)/about': typeof landingAboutRoute;
    '/(landing)/contact': typeof landingContactRoute;
    '/(landing)/developers': typeof landingDevelopersRoute;
    '/account/profile': typeof AccountProfileRoute;
    '/account/security': typeof AccountSecurityRoute;
    '/auth/forgot-password': typeof AuthForgotPasswordRoute;
    '/auth/sign-in': typeof AuthSignInLazyRoute;
    '/auth/sign-up': typeof AuthSignUpLazyRoute;
    '/(landing)/': typeof landingIndexRoute;
    '/account/': typeof AccountIndexRoute;
    '/account/verify/contact': typeof AccountVerifyContactRoute;
    '/account/verify/email': typeof AccountVerifyEmailRoute;
    '/auth/password-reset/$resetId': typeof AuthPasswordResetResetIdRoute;
    '/org/$orgname/branch/$branchname': typeof OrgOrgnameBranchBranchnameRouteRouteWithChildren;
    '/org/$orgname/branch/$branchname/(common)/dashboard': typeof OrgOrgnameBranchBranchnamecommonDashboardRoute;
    '/org/$orgname/branch/$branchname/(maintenance)/member/member-gender': typeof OrgOrgnameBranchBranchnamemaintenanceMemberMemberGenderRoute;
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath;
    fullPaths:
        | '/'
        | '/account'
        | '/auth'
        | '/onboarding'
        | '/org/$orgname'
        | '/about'
        | '/contact'
        | '/developers'
        | '/account/profile'
        | '/account/security'
        | '/auth/forgot-password'
        | '/auth/sign-in'
        | '/auth/sign-up'
        | '/account/'
        | '/account/verify/contact'
        | '/account/verify/email'
        | '/auth/password-reset/$resetId'
        | '/org/$orgname/branch/$branchname'
        | '/org/$orgname/branch/$branchname/dashboard'
        | '/org/$orgname/branch/$branchname/member/member-gender';
    fileRoutesByTo: FileRoutesByTo;
    to:
        | '/auth'
        | '/onboarding'
        | '/org/$orgname'
        | '/about'
        | '/contact'
        | '/developers'
        | '/account/profile'
        | '/account/security'
        | '/auth/forgot-password'
        | '/auth/sign-in'
        | '/auth/sign-up'
        | '/'
        | '/account'
        | '/account/verify/contact'
        | '/account/verify/email'
        | '/auth/password-reset/$resetId'
        | '/org/$orgname/branch/$branchname'
        | '/org/$orgname/branch/$branchname/dashboard'
        | '/org/$orgname/branch/$branchname/member/member-gender';
    id:
        | '__root__'
        | '/(landing)'
        | '/account'
        | '/auth'
        | '/onboarding'
        | '/org/$orgname'
        | '/(landing)/about'
        | '/(landing)/contact'
        | '/(landing)/developers'
        | '/account/profile'
        | '/account/security'
        | '/auth/forgot-password'
        | '/auth/sign-in'
        | '/auth/sign-up'
        | '/(landing)/'
        | '/account/'
        | '/account/verify/contact'
        | '/account/verify/email'
        | '/auth/password-reset/$resetId'
        | '/org/$orgname/branch/$branchname'
        | '/org/$orgname/branch/$branchname/(common)/dashboard'
        | '/org/$orgname/branch/$branchname/(maintenance)/member/member-gender';
    fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
    landingRouteRoute: typeof landingRouteRouteWithChildren;
    AccountRouteRoute: typeof AccountRouteRouteWithChildren;
    AuthRouteRoute: typeof AuthRouteRouteWithChildren;
    OnboardingRouteRoute: typeof OnboardingRouteRoute;
    OrgOrgnameRouteRoute: typeof OrgOrgnameRouteRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
    landingRouteRoute: landingRouteRouteWithChildren,
    AccountRouteRoute: AccountRouteRouteWithChildren,
    AuthRouteRoute: AuthRouteRouteWithChildren,
    OnboardingRouteRoute: OnboardingRouteRoute,
    OrgOrgnameRouteRoute: OrgOrgnameRouteRouteWithChildren,
};

export const routeTree = rootRoute
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(landing)",
        "/account",
        "/auth",
        "/onboarding",
        "/org/$orgname"
      ]
    },
    "/(landing)": {
      "filePath": "(landing)/route.tsx",
      "children": [
        "/(landing)/about",
        "/(landing)/contact",
        "/(landing)/developers",
        "/(landing)/"
      ]
    },
    "/account": {
      "filePath": "account/route.tsx",
      "children": [
        "/account/profile",
        "/account/security",
        "/account/",
        "/account/verify/contact",
        "/account/verify/email"
      ]
    },
    "/auth": {
      "filePath": "auth/route.tsx",
      "children": [
        "/auth/forgot-password",
        "/auth/sign-in",
        "/auth/sign-up",
        "/auth/password-reset/$resetId"
      ]
    },
    "/onboarding": {
      "filePath": "onboarding/route.tsx"
    },
    "/org/$orgname": {
      "filePath": "org/$orgname.route.tsx",
      "children": [
        "/org/$orgname/branch/$branchname"
      ]
    },
    "/(landing)/about": {
      "filePath": "(landing)/about.tsx",
      "parent": "/(landing)"
    },
    "/(landing)/contact": {
      "filePath": "(landing)/contact.tsx",
      "parent": "/(landing)"
    },
    "/(landing)/developers": {
      "filePath": "(landing)/developers.tsx",
      "parent": "/(landing)"
    },
    "/account/profile": {
      "filePath": "account/profile.tsx",
      "parent": "/account"
    },
    "/account/security": {
      "filePath": "account/security.tsx",
      "parent": "/account"
    },
    "/auth/forgot-password": {
      "filePath": "auth/forgot-password.tsx",
      "parent": "/auth"
    },
    "/auth/sign-in": {
      "filePath": "auth/sign-in.lazy.tsx",
      "parent": "/auth"
    },
    "/auth/sign-up": {
      "filePath": "auth/sign-up.lazy.tsx",
      "parent": "/auth"
    },
    "/(landing)/": {
      "filePath": "(landing)/index.tsx",
      "parent": "/(landing)"
    },
    "/account/": {
      "filePath": "account/index.tsx",
      "parent": "/account"
    },
    "/account/verify/contact": {
      "filePath": "account/verify/contact.tsx",
      "parent": "/account"
    },
    "/account/verify/email": {
      "filePath": "account/verify/email.tsx",
      "parent": "/account"
    },
    "/auth/password-reset/$resetId": {
      "filePath": "auth/password-reset.$resetId.tsx",
      "parent": "/auth"
    },
    "/org/$orgname/branch/$branchname": {
      "filePath": "org/$orgname.branch.$branchname/route.tsx",
      "parent": "/org/$orgname",
      "children": [
        "/org/$orgname/branch/$branchname/(common)/dashboard",
        "/org/$orgname/branch/$branchname/(maintenance)/member/member-gender"
      ]
    },
    "/org/$orgname/branch/$branchname/(common)/dashboard": {
      "filePath": "org/$orgname.branch.$branchname/(common)/dashboard.tsx",
      "parent": "/org/$orgname/branch/$branchname"
    },
    "/org/$orgname/branch/$branchname/(maintenance)/member/member-gender": {
      "filePath": "org/$orgname.branch.$branchname/(maintenance)/member/member-gender.tsx",
      "parent": "/org/$orgname/branch/$branchname"
    }
  }
}
ROUTE_MANIFEST_END */
