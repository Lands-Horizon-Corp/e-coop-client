/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as landingRouteRouteImport } from './routes/(landing)/route'
import { Route as landingIndexRouteImport } from './routes/(landing)/index'
import { Route as landingTestRouteImport } from './routes/(landing)/test'
import { Route as landingFrequentlyAskedQuestionsRouteImport } from './routes/(landing)/frequently-asked-questions'
import { Route as landingDevelopersRouteImport } from './routes/(landing)/developers'
import { Route as landingContactRouteImport } from './routes/(landing)/contact'
import { Route as landingAboutRouteImport } from './routes/(landing)/about'
import { Route as landingPolicyRouteRouteImport } from './routes/(landing)/policy/route'
import { Route as landingSubscriptionIndexRouteImport } from './routes/(landing)/subscription/index'
import { Route as landingPolicyTermsOfUseRouteImport } from './routes/(landing)/policy/terms-of-use'
import { Route as landingPolicyTermsAndConditionRouteImport } from './routes/(landing)/policy/terms-and-condition'
import { Route as landingPolicySecurityPolicyRouteImport } from './routes/(landing)/policy/security-policy'
import { Route as landingPolicyRiskManagementPolicyRouteImport } from './routes/(landing)/policy/risk-management-policy'
import { Route as landingPolicyPrivacyPolicyRouteImport } from './routes/(landing)/policy/privacy-policy'
import { Route as landingPolicyKycPolicyRouteImport } from './routes/(landing)/policy/kyc-policy'
import { Route as landingPolicyFeeAndChargesPolicyRouteImport } from './routes/(landing)/policy/fee-and-charges-policy'
import { Route as landingPolicyDeveloperPolicyRouteImport } from './routes/(landing)/policy/developer-policy'
import { Route as landingPolicyDataProtectionPolicyRouteImport } from './routes/(landing)/policy/data-protection-policy'
import { Route as landingPolicyCookiePolicyRouteImport } from './routes/(landing)/policy/cookie-policy'
import { Route as landingPolicyComplaintHandlingAndDisputePolicyRouteImport } from './routes/(landing)/policy/complaint-handling-and-dispute-policy'
import { Route as landingPolicyCodeOfConductEthicsPolicyRouteImport } from './routes/(landing)/policy/code-of-conduct-ethics-policy'
import { Route as landingPolicyAmlCtfPolicyRouteImport } from './routes/(landing)/policy/aml-ctf-policy'

const landingRouteRoute = landingRouteRouteImport.update({
  id: '/(landing)',
  getParentRoute: () => rootRouteImport,
} as any)
const landingIndexRoute = landingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => landingRouteRoute,
} as any)
const landingTestRoute = landingTestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => landingRouteRoute,
} as any)
const landingFrequentlyAskedQuestionsRoute =
  landingFrequentlyAskedQuestionsRouteImport.update({
    id: '/frequently-asked-questions',
    path: '/frequently-asked-questions',
    getParentRoute: () => landingRouteRoute,
  } as any)
const landingDevelopersRoute = landingDevelopersRouteImport.update({
  id: '/developers',
  path: '/developers',
  getParentRoute: () => landingRouteRoute,
} as any)
const landingContactRoute = landingContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => landingRouteRoute,
} as any)
const landingAboutRoute = landingAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => landingRouteRoute,
} as any)
const landingPolicyRouteRoute = landingPolicyRouteRouteImport.update({
  id: '/policy',
  path: '/policy',
  getParentRoute: () => landingRouteRoute,
} as any)
const landingSubscriptionIndexRoute =
  landingSubscriptionIndexRouteImport.update({
    id: '/subscription/',
    path: '/subscription/',
    getParentRoute: () => landingRouteRoute,
  } as any)
const landingPolicyTermsOfUseRoute = landingPolicyTermsOfUseRouteImport.update({
  id: '/terms-of-use',
  path: '/terms-of-use',
  getParentRoute: () => landingPolicyRouteRoute,
} as any)
const landingPolicyTermsAndConditionRoute =
  landingPolicyTermsAndConditionRouteImport.update({
    id: '/terms-and-condition',
    path: '/terms-and-condition',
    getParentRoute: () => landingPolicyRouteRoute,
  } as any)
const landingPolicySecurityPolicyRoute =
  landingPolicySecurityPolicyRouteImport.update({
    id: '/security-policy',
    path: '/security-policy',
    getParentRoute: () => landingPolicyRouteRoute,
  } as any)
const landingPolicyRiskManagementPolicyRoute =
  landingPolicyRiskManagementPolicyRouteImport.update({
    id: '/risk-management-policy',
    path: '/risk-management-policy',
    getParentRoute: () => landingPolicyRouteRoute,
  } as any)
const landingPolicyPrivacyPolicyRoute =
  landingPolicyPrivacyPolicyRouteImport.update({
    id: '/privacy-policy',
    path: '/privacy-policy',
    getParentRoute: () => landingPolicyRouteRoute,
  } as any)
const landingPolicyKycPolicyRoute = landingPolicyKycPolicyRouteImport.update({
  id: '/kyc-policy',
  path: '/kyc-policy',
  getParentRoute: () => landingPolicyRouteRoute,
} as any)
const landingPolicyFeeAndChargesPolicyRoute =
  landingPolicyFeeAndChargesPolicyRouteImport.update({
    id: '/fee-and-charges-policy',
    path: '/fee-and-charges-policy',
    getParentRoute: () => landingPolicyRouteRoute,
  } as any)
const landingPolicyDeveloperPolicyRoute =
  landingPolicyDeveloperPolicyRouteImport.update({
    id: '/developer-policy',
    path: '/developer-policy',
    getParentRoute: () => landingPolicyRouteRoute,
  } as any)
const landingPolicyDataProtectionPolicyRoute =
  landingPolicyDataProtectionPolicyRouteImport.update({
    id: '/data-protection-policy',
    path: '/data-protection-policy',
    getParentRoute: () => landingPolicyRouteRoute,
  } as any)
const landingPolicyCookiePolicyRoute =
  landingPolicyCookiePolicyRouteImport.update({
    id: '/cookie-policy',
    path: '/cookie-policy',
    getParentRoute: () => landingPolicyRouteRoute,
  } as any)
const landingPolicyComplaintHandlingAndDisputePolicyRoute =
  landingPolicyComplaintHandlingAndDisputePolicyRouteImport.update({
    id: '/complaint-handling-and-dispute-policy',
    path: '/complaint-handling-and-dispute-policy',
    getParentRoute: () => landingPolicyRouteRoute,
  } as any)
const landingPolicyCodeOfConductEthicsPolicyRoute =
  landingPolicyCodeOfConductEthicsPolicyRouteImport.update({
    id: '/code-of-conduct-ethics-policy',
    path: '/code-of-conduct-ethics-policy',
    getParentRoute: () => landingPolicyRouteRoute,
  } as any)
const landingPolicyAmlCtfPolicyRoute =
  landingPolicyAmlCtfPolicyRouteImport.update({
    id: '/aml-ctf-policy',
    path: '/aml-ctf-policy',
    getParentRoute: () => landingPolicyRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof landingIndexRoute
  '/policy': typeof landingPolicyRouteRouteWithChildren
  '/about': typeof landingAboutRoute
  '/contact': typeof landingContactRoute
  '/developers': typeof landingDevelopersRoute
  '/frequently-asked-questions': typeof landingFrequentlyAskedQuestionsRoute
  '/test': typeof landingTestRoute
  '/policy/aml-ctf-policy': typeof landingPolicyAmlCtfPolicyRoute
  '/policy/code-of-conduct-ethics-policy': typeof landingPolicyCodeOfConductEthicsPolicyRoute
  '/policy/complaint-handling-and-dispute-policy': typeof landingPolicyComplaintHandlingAndDisputePolicyRoute
  '/policy/cookie-policy': typeof landingPolicyCookiePolicyRoute
  '/policy/data-protection-policy': typeof landingPolicyDataProtectionPolicyRoute
  '/policy/developer-policy': typeof landingPolicyDeveloperPolicyRoute
  '/policy/fee-and-charges-policy': typeof landingPolicyFeeAndChargesPolicyRoute
  '/policy/kyc-policy': typeof landingPolicyKycPolicyRoute
  '/policy/privacy-policy': typeof landingPolicyPrivacyPolicyRoute
  '/policy/risk-management-policy': typeof landingPolicyRiskManagementPolicyRoute
  '/policy/security-policy': typeof landingPolicySecurityPolicyRoute
  '/policy/terms-and-condition': typeof landingPolicyTermsAndConditionRoute
  '/policy/terms-of-use': typeof landingPolicyTermsOfUseRoute
  '/subscription': typeof landingSubscriptionIndexRoute
}
export interface FileRoutesByTo {
  '/policy': typeof landingPolicyRouteRouteWithChildren
  '/about': typeof landingAboutRoute
  '/contact': typeof landingContactRoute
  '/developers': typeof landingDevelopersRoute
  '/frequently-asked-questions': typeof landingFrequentlyAskedQuestionsRoute
  '/test': typeof landingTestRoute
  '/': typeof landingIndexRoute
  '/policy/aml-ctf-policy': typeof landingPolicyAmlCtfPolicyRoute
  '/policy/code-of-conduct-ethics-policy': typeof landingPolicyCodeOfConductEthicsPolicyRoute
  '/policy/complaint-handling-and-dispute-policy': typeof landingPolicyComplaintHandlingAndDisputePolicyRoute
  '/policy/cookie-policy': typeof landingPolicyCookiePolicyRoute
  '/policy/data-protection-policy': typeof landingPolicyDataProtectionPolicyRoute
  '/policy/developer-policy': typeof landingPolicyDeveloperPolicyRoute
  '/policy/fee-and-charges-policy': typeof landingPolicyFeeAndChargesPolicyRoute
  '/policy/kyc-policy': typeof landingPolicyKycPolicyRoute
  '/policy/privacy-policy': typeof landingPolicyPrivacyPolicyRoute
  '/policy/risk-management-policy': typeof landingPolicyRiskManagementPolicyRoute
  '/policy/security-policy': typeof landingPolicySecurityPolicyRoute
  '/policy/terms-and-condition': typeof landingPolicyTermsAndConditionRoute
  '/policy/terms-of-use': typeof landingPolicyTermsOfUseRoute
  '/subscription': typeof landingSubscriptionIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(landing)': typeof landingRouteRouteWithChildren
  '/(landing)/policy': typeof landingPolicyRouteRouteWithChildren
  '/(landing)/about': typeof landingAboutRoute
  '/(landing)/contact': typeof landingContactRoute
  '/(landing)/developers': typeof landingDevelopersRoute
  '/(landing)/frequently-asked-questions': typeof landingFrequentlyAskedQuestionsRoute
  '/(landing)/test': typeof landingTestRoute
  '/(landing)/': typeof landingIndexRoute
  '/(landing)/policy/aml-ctf-policy': typeof landingPolicyAmlCtfPolicyRoute
  '/(landing)/policy/code-of-conduct-ethics-policy': typeof landingPolicyCodeOfConductEthicsPolicyRoute
  '/(landing)/policy/complaint-handling-and-dispute-policy': typeof landingPolicyComplaintHandlingAndDisputePolicyRoute
  '/(landing)/policy/cookie-policy': typeof landingPolicyCookiePolicyRoute
  '/(landing)/policy/data-protection-policy': typeof landingPolicyDataProtectionPolicyRoute
  '/(landing)/policy/developer-policy': typeof landingPolicyDeveloperPolicyRoute
  '/(landing)/policy/fee-and-charges-policy': typeof landingPolicyFeeAndChargesPolicyRoute
  '/(landing)/policy/kyc-policy': typeof landingPolicyKycPolicyRoute
  '/(landing)/policy/privacy-policy': typeof landingPolicyPrivacyPolicyRoute
  '/(landing)/policy/risk-management-policy': typeof landingPolicyRiskManagementPolicyRoute
  '/(landing)/policy/security-policy': typeof landingPolicySecurityPolicyRoute
  '/(landing)/policy/terms-and-condition': typeof landingPolicyTermsAndConditionRoute
  '/(landing)/policy/terms-of-use': typeof landingPolicyTermsOfUseRoute
  '/(landing)/subscription/': typeof landingSubscriptionIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/policy'
    | '/about'
    | '/contact'
    | '/developers'
    | '/frequently-asked-questions'
    | '/test'
    | '/policy/aml-ctf-policy'
    | '/policy/code-of-conduct-ethics-policy'
    | '/policy/complaint-handling-and-dispute-policy'
    | '/policy/cookie-policy'
    | '/policy/data-protection-policy'
    | '/policy/developer-policy'
    | '/policy/fee-and-charges-policy'
    | '/policy/kyc-policy'
    | '/policy/privacy-policy'
    | '/policy/risk-management-policy'
    | '/policy/security-policy'
    | '/policy/terms-and-condition'
    | '/policy/terms-of-use'
    | '/subscription'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/policy'
    | '/about'
    | '/contact'
    | '/developers'
    | '/frequently-asked-questions'
    | '/test'
    | '/'
    | '/policy/aml-ctf-policy'
    | '/policy/code-of-conduct-ethics-policy'
    | '/policy/complaint-handling-and-dispute-policy'
    | '/policy/cookie-policy'
    | '/policy/data-protection-policy'
    | '/policy/developer-policy'
    | '/policy/fee-and-charges-policy'
    | '/policy/kyc-policy'
    | '/policy/privacy-policy'
    | '/policy/risk-management-policy'
    | '/policy/security-policy'
    | '/policy/terms-and-condition'
    | '/policy/terms-of-use'
    | '/subscription'
  id:
    | '__root__'
    | '/(landing)'
    | '/(landing)/policy'
    | '/(landing)/about'
    | '/(landing)/contact'
    | '/(landing)/developers'
    | '/(landing)/frequently-asked-questions'
    | '/(landing)/test'
    | '/(landing)/'
    | '/(landing)/policy/aml-ctf-policy'
    | '/(landing)/policy/code-of-conduct-ethics-policy'
    | '/(landing)/policy/complaint-handling-and-dispute-policy'
    | '/(landing)/policy/cookie-policy'
    | '/(landing)/policy/data-protection-policy'
    | '/(landing)/policy/developer-policy'
    | '/(landing)/policy/fee-and-charges-policy'
    | '/(landing)/policy/kyc-policy'
    | '/(landing)/policy/privacy-policy'
    | '/(landing)/policy/risk-management-policy'
    | '/(landing)/policy/security-policy'
    | '/(landing)/policy/terms-and-condition'
    | '/(landing)/policy/terms-of-use'
    | '/(landing)/subscription/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  landingRouteRoute: typeof landingRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(landing)': {
      id: '/(landing)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof landingRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(landing)/': {
      id: '/(landing)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof landingIndexRouteImport
      parentRoute: typeof landingRouteRoute
    }
    '/(landing)/test': {
      id: '/(landing)/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof landingTestRouteImport
      parentRoute: typeof landingRouteRoute
    }
    '/(landing)/frequently-asked-questions': {
      id: '/(landing)/frequently-asked-questions'
      path: '/frequently-asked-questions'
      fullPath: '/frequently-asked-questions'
      preLoaderRoute: typeof landingFrequentlyAskedQuestionsRouteImport
      parentRoute: typeof landingRouteRoute
    }
    '/(landing)/developers': {
      id: '/(landing)/developers'
      path: '/developers'
      fullPath: '/developers'
      preLoaderRoute: typeof landingDevelopersRouteImport
      parentRoute: typeof landingRouteRoute
    }
    '/(landing)/contact': {
      id: '/(landing)/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof landingContactRouteImport
      parentRoute: typeof landingRouteRoute
    }
    '/(landing)/about': {
      id: '/(landing)/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof landingAboutRouteImport
      parentRoute: typeof landingRouteRoute
    }
    '/(landing)/policy': {
      id: '/(landing)/policy'
      path: '/policy'
      fullPath: '/policy'
      preLoaderRoute: typeof landingPolicyRouteRouteImport
      parentRoute: typeof landingRouteRoute
    }
    '/(landing)/subscription/': {
      id: '/(landing)/subscription/'
      path: '/subscription'
      fullPath: '/subscription'
      preLoaderRoute: typeof landingSubscriptionIndexRouteImport
      parentRoute: typeof landingRouteRoute
    }
    '/(landing)/policy/terms-of-use': {
      id: '/(landing)/policy/terms-of-use'
      path: '/terms-of-use'
      fullPath: '/policy/terms-of-use'
      preLoaderRoute: typeof landingPolicyTermsOfUseRouteImport
      parentRoute: typeof landingPolicyRouteRoute
    }
    '/(landing)/policy/terms-and-condition': {
      id: '/(landing)/policy/terms-and-condition'
      path: '/terms-and-condition'
      fullPath: '/policy/terms-and-condition'
      preLoaderRoute: typeof landingPolicyTermsAndConditionRouteImport
      parentRoute: typeof landingPolicyRouteRoute
    }
    '/(landing)/policy/security-policy': {
      id: '/(landing)/policy/security-policy'
      path: '/security-policy'
      fullPath: '/policy/security-policy'
      preLoaderRoute: typeof landingPolicySecurityPolicyRouteImport
      parentRoute: typeof landingPolicyRouteRoute
    }
    '/(landing)/policy/risk-management-policy': {
      id: '/(landing)/policy/risk-management-policy'
      path: '/risk-management-policy'
      fullPath: '/policy/risk-management-policy'
      preLoaderRoute: typeof landingPolicyRiskManagementPolicyRouteImport
      parentRoute: typeof landingPolicyRouteRoute
    }
    '/(landing)/policy/privacy-policy': {
      id: '/(landing)/policy/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/policy/privacy-policy'
      preLoaderRoute: typeof landingPolicyPrivacyPolicyRouteImport
      parentRoute: typeof landingPolicyRouteRoute
    }
    '/(landing)/policy/kyc-policy': {
      id: '/(landing)/policy/kyc-policy'
      path: '/kyc-policy'
      fullPath: '/policy/kyc-policy'
      preLoaderRoute: typeof landingPolicyKycPolicyRouteImport
      parentRoute: typeof landingPolicyRouteRoute
    }
    '/(landing)/policy/fee-and-charges-policy': {
      id: '/(landing)/policy/fee-and-charges-policy'
      path: '/fee-and-charges-policy'
      fullPath: '/policy/fee-and-charges-policy'
      preLoaderRoute: typeof landingPolicyFeeAndChargesPolicyRouteImport
      parentRoute: typeof landingPolicyRouteRoute
    }
    '/(landing)/policy/developer-policy': {
      id: '/(landing)/policy/developer-policy'
      path: '/developer-policy'
      fullPath: '/policy/developer-policy'
      preLoaderRoute: typeof landingPolicyDeveloperPolicyRouteImport
      parentRoute: typeof landingPolicyRouteRoute
    }
    '/(landing)/policy/data-protection-policy': {
      id: '/(landing)/policy/data-protection-policy'
      path: '/data-protection-policy'
      fullPath: '/policy/data-protection-policy'
      preLoaderRoute: typeof landingPolicyDataProtectionPolicyRouteImport
      parentRoute: typeof landingPolicyRouteRoute
    }
    '/(landing)/policy/cookie-policy': {
      id: '/(landing)/policy/cookie-policy'
      path: '/cookie-policy'
      fullPath: '/policy/cookie-policy'
      preLoaderRoute: typeof landingPolicyCookiePolicyRouteImport
      parentRoute: typeof landingPolicyRouteRoute
    }
    '/(landing)/policy/complaint-handling-and-dispute-policy': {
      id: '/(landing)/policy/complaint-handling-and-dispute-policy'
      path: '/complaint-handling-and-dispute-policy'
      fullPath: '/policy/complaint-handling-and-dispute-policy'
      preLoaderRoute: typeof landingPolicyComplaintHandlingAndDisputePolicyRouteImport
      parentRoute: typeof landingPolicyRouteRoute
    }
    '/(landing)/policy/code-of-conduct-ethics-policy': {
      id: '/(landing)/policy/code-of-conduct-ethics-policy'
      path: '/code-of-conduct-ethics-policy'
      fullPath: '/policy/code-of-conduct-ethics-policy'
      preLoaderRoute: typeof landingPolicyCodeOfConductEthicsPolicyRouteImport
      parentRoute: typeof landingPolicyRouteRoute
    }
    '/(landing)/policy/aml-ctf-policy': {
      id: '/(landing)/policy/aml-ctf-policy'
      path: '/aml-ctf-policy'
      fullPath: '/policy/aml-ctf-policy'
      preLoaderRoute: typeof landingPolicyAmlCtfPolicyRouteImport
      parentRoute: typeof landingPolicyRouteRoute
    }
  }
}

interface landingPolicyRouteRouteChildren {
  landingPolicyAmlCtfPolicyRoute: typeof landingPolicyAmlCtfPolicyRoute
  landingPolicyCodeOfConductEthicsPolicyRoute: typeof landingPolicyCodeOfConductEthicsPolicyRoute
  landingPolicyComplaintHandlingAndDisputePolicyRoute: typeof landingPolicyComplaintHandlingAndDisputePolicyRoute
  landingPolicyCookiePolicyRoute: typeof landingPolicyCookiePolicyRoute
  landingPolicyDataProtectionPolicyRoute: typeof landingPolicyDataProtectionPolicyRoute
  landingPolicyDeveloperPolicyRoute: typeof landingPolicyDeveloperPolicyRoute
  landingPolicyFeeAndChargesPolicyRoute: typeof landingPolicyFeeAndChargesPolicyRoute
  landingPolicyKycPolicyRoute: typeof landingPolicyKycPolicyRoute
  landingPolicyPrivacyPolicyRoute: typeof landingPolicyPrivacyPolicyRoute
  landingPolicyRiskManagementPolicyRoute: typeof landingPolicyRiskManagementPolicyRoute
  landingPolicySecurityPolicyRoute: typeof landingPolicySecurityPolicyRoute
  landingPolicyTermsAndConditionRoute: typeof landingPolicyTermsAndConditionRoute
  landingPolicyTermsOfUseRoute: typeof landingPolicyTermsOfUseRoute
}

const landingPolicyRouteRouteChildren: landingPolicyRouteRouteChildren = {
  landingPolicyAmlCtfPolicyRoute: landingPolicyAmlCtfPolicyRoute,
  landingPolicyCodeOfConductEthicsPolicyRoute:
    landingPolicyCodeOfConductEthicsPolicyRoute,
  landingPolicyComplaintHandlingAndDisputePolicyRoute:
    landingPolicyComplaintHandlingAndDisputePolicyRoute,
  landingPolicyCookiePolicyRoute: landingPolicyCookiePolicyRoute,
  landingPolicyDataProtectionPolicyRoute:
    landingPolicyDataProtectionPolicyRoute,
  landingPolicyDeveloperPolicyRoute: landingPolicyDeveloperPolicyRoute,
  landingPolicyFeeAndChargesPolicyRoute: landingPolicyFeeAndChargesPolicyRoute,
  landingPolicyKycPolicyRoute: landingPolicyKycPolicyRoute,
  landingPolicyPrivacyPolicyRoute: landingPolicyPrivacyPolicyRoute,
  landingPolicyRiskManagementPolicyRoute:
    landingPolicyRiskManagementPolicyRoute,
  landingPolicySecurityPolicyRoute: landingPolicySecurityPolicyRoute,
  landingPolicyTermsAndConditionRoute: landingPolicyTermsAndConditionRoute,
  landingPolicyTermsOfUseRoute: landingPolicyTermsOfUseRoute,
}

const landingPolicyRouteRouteWithChildren =
  landingPolicyRouteRoute._addFileChildren(landingPolicyRouteRouteChildren)

interface landingRouteRouteChildren {
  landingPolicyRouteRoute: typeof landingPolicyRouteRouteWithChildren
  landingAboutRoute: typeof landingAboutRoute
  landingContactRoute: typeof landingContactRoute
  landingDevelopersRoute: typeof landingDevelopersRoute
  landingFrequentlyAskedQuestionsRoute: typeof landingFrequentlyAskedQuestionsRoute
  landingTestRoute: typeof landingTestRoute
  landingIndexRoute: typeof landingIndexRoute
  landingSubscriptionIndexRoute: typeof landingSubscriptionIndexRoute
}

const landingRouteRouteChildren: landingRouteRouteChildren = {
  landingPolicyRouteRoute: landingPolicyRouteRouteWithChildren,
  landingAboutRoute: landingAboutRoute,
  landingContactRoute: landingContactRoute,
  landingDevelopersRoute: landingDevelopersRoute,
  landingFrequentlyAskedQuestionsRoute: landingFrequentlyAskedQuestionsRoute,
  landingTestRoute: landingTestRoute,
  landingIndexRoute: landingIndexRoute,
  landingSubscriptionIndexRoute: landingSubscriptionIndexRoute,
}

const landingRouteRouteWithChildren = landingRouteRoute._addFileChildren(
  landingRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  landingRouteRoute: landingRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
