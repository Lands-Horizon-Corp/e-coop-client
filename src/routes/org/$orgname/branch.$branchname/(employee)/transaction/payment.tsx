import { useQueryClient } from '@tanstack/react-query'
import { useState } from 'react'
import { z } from 'zod'

import { zodResolver } from '@hookform/resolvers/zod'

import { useTransactionBatchStore } from '@/store/transaction-batch-store'
import { usePaymentsDataStore } from '@/store/transaction/payments-entry-store'
import { createFileRoute, useNavigate } from '@tanstack/react-router'
import { useForm } from 'react-hook-form'

import PageContainer from '@/components/containers/page-container'
import { MoneyIcon, ResetIcon, XIcon } from '@/components/icons'
import MemberPicker from '@/components/pickers/member-picker'
import LoadingSpinner from '@/components/spinners/loading-spinner'
import MemberAccountingLedgerTable from '@/components/tables/ledgers-tables/member-accounting-ledger-table'
import MemberAccountGeneralLedgerAction from '@/components/tables/ledgers-tables/member-accounting-ledger-table/member-account-general-ledger-table/actions'
import { Button } from '@/components/ui/button'
import { Form } from '@/components/ui/form'
import FormFieldWrapper from '@/components/ui/form-field-wrapper'
import { Label } from '@/components/ui/label'
import {
    ResizableHandle,
    ResizablePanel,
    ResizablePanelGroup,
} from '@/components/ui/resizable'
import { Textarea } from '@/components/ui/textarea'

import { useGetTransactionById } from '@/hooks/api-hooks/use-transaction'
import { useUpdateReferenceNumber } from '@/hooks/api-hooks/use-transaction'
import { useTransactionShortcuts } from '@/hooks/shortcut-hooks/payments-entry-shortcuts'
import { useGetUserSettings } from '@/hooks/use-get-use-settings'
import { useSubscribe } from '@/hooks/use-pubsub'

import { IGeneralLedger, IMemberJointAccount, TEntityId } from '@/types'

import PaymentWithTransactionModal from '../../../../../../components/forms/transaction-forms/create-payment-with-transaction-form'
import CurrentPaymentsEntry from './-components/current-payments-entry'
import TransactionCardList from './-components/current-transaction'
import MemberProfileTransactionView from './-components/member-profile-view-card'
import NoMemberSelectedView from './-components/no-member-selected-view'
import NoTransactionBatchWarningModal from './-components/no-transaction-batch'
import PaymentSuccessModal from './-components/payment-success-modal'
import ReferenceNumber from './-components/reference-number-field'
import TransactionActions from './-components/transaction-actions'

const updateTransactionOR = z.object({
    reference_number: z.string().min(1, 'Reference number is required'),
    description: z.string().max(250, 'Description is required'),
})

type FormValues = z.infer<typeof updateTransactionOR>
type TransactionSearch = {
    transactionId: TEntityId
}

export const Route = createFileRoute(
    '/org/$orgname/branch/$branchname/(employee)/transaction/payment'
)({
    validateSearch: (search: Record<string, unknown>): TransactionSearch => {
        return {
            transactionId: String(search?.transactionId ?? ''),
        }
    },
    component: RouteComponent,
})

function RouteComponent() {
    const { data: transactionBatch } = useTransactionBatchStore()
    const navigate = useNavigate({ from: Route.fullPath })
    const queryClient = useQueryClient()
    const { userSettingOR } = useGetUserSettings()
    const { transactionId } = Route.useSearch()

    const hasTransactionBatch = !!transactionBatch

    const [openMemberPicker, setOpenMemberPicker] = useState(false)
    const [openSuccessModal, setOnOpenSuccessModal] = useState(false)
    const [isAutoGeneratedOR, setIsAutoGeneratedOR] = useState(false)
    const [transactionFormSuccess, setTransactionFormSuccess] =
        useState<IGeneralLedger | null>(null)
    const [selectedJointMember, setSelectedJointMember] =
        useState<IMemberJointAccount | null>(null)
    const [selectedAccountId, setSelectedAccountId] = useState<
        TEntityId | undefined
    >(undefined)

    const [
        openPaymentWithTransactionModal,
        setOpenPaymentWithTransactionModal,
    ] = useState(false)

    const {
        selectedMember,
        setSelectedMember,
        setFocusTypePayment,
        focusTypePayment,
    } = usePaymentsDataStore()

    const form = useForm<FormValues>({
        resolver: zodResolver(updateTransactionOR),
        defaultValues: {
            reference_number: userSettingOR,
            description: '',
        },
    })

    const {
        mutate: updateReferenceNumber,
        isPending: isLoadingUpdateReferenceNumber,
    } = useUpdateReferenceNumber()

    const { data: transaction } = useGetTransactionById({
        transactionId,
        enabled: !!transactionId,
        onSuccess: (transaction) => {
            form.setValue(
                'reference_number',
                transaction?.reference_number || ''
            )
            form.setValue('description', transaction?.description || '')
            setSelectedMember(transaction?.member_profile)
        },
    })

    const referenceNumber = transaction?.reference_number || ''
    const description = transaction?.description || ''

    const onSubmit = form.handleSubmit((values: FormValues) => {
        if (transaction) {
            updateReferenceNumber({
                transactionId: transaction.id,
                reference_number: values.reference_number,
                description: values.description,
            })
        }
    })

    const handleSetOR = () => {
        form.setValue('reference_number', userSettingOR)
    }

    const handleResetForm = () => {
        form.reset({
            reference_number: referenceNumber || '',
            description: description || '',
        })
        setIsAutoGeneratedOR(false)
        handleSetOR()
    }

    useSubscribe(
        `member_occupation_history.create.member_profile.${selectedMember?.id}`
    )
    useSubscribe(
        `member_occupation_history.update.member_profile.${selectedMember?.id}`
    )
    useSubscribe(
        `member_occupation_history.delete.member_profile.${selectedMember?.id}`
    )
    useSubscribe(`transaction.create.${transactionId}`)
    useSubscribe(`transaction.update.${transactionId}`)

    // const HandleNewTransaction = () => {
    //     setOnOpenSuccessModal(false)
    //     setSelectedMember(null)
    //     setOnOpenSuccessModal(false)
    //     navigate({
    //         to: Route.fullPath,
    //         search: {
    //             transactionId: '',
    //         },
    //     })
    //     form.reset()
    // }

    const handleResetAll = () => {
        setSelectedMember(null)
        setSelectedJointMember(null)
        setOpenMemberPicker(false)
        setOpenPaymentWithTransactionModal(false)
        setOnOpenSuccessModal(false)
        navigate({
            to: Route.fullPath,
            search: {
                transactionId: '',
            },
        })
        form.reset()
    }

    useTransactionShortcuts({
        hasSelectedMember: !!selectedMember,
        openPaymentWithTransactionModal,
        openSuccessModal,
        hasSelectedTransactionId: !!transactionId,
        setOpenPaymentWithTransactionModal,
        setFocusTypePayment,
        handleResetAll,
    })

    const handleOnSuccessPaymentCallBack = (transaction: IGeneralLedger) => {
        setTransactionFormSuccess(transaction)
        setOnOpenSuccessModal(true)
    }

    const handleSetTransactionId = (transactionId: TEntityId) => {
        navigate({
            to: Route.fullPath,
            search: {
                transactionId,
            },
        })
    }

    const handleCloseSuccessModal = () => {
        setOnOpenSuccessModal(false)
        setTransactionFormSuccess(null)
    }

    const hasSelectedMember = !!selectedMember
    const hasSelectedTransactionId = !!transactionId

    const referenceNotEqual = form.watch('reference_number') !== referenceNumber
    const descriptionNotEqual = form.watch('description') !== description

    const quickPaymentTitle = (
        <div className="flex items-center">
            <MoneyIcon className="mr-2" />
            <span className="font-bold">{`${focusTypePayment?.charAt(0).toUpperCase()}${focusTypePayment?.slice(1)}`}</span>
        </div>
    )

    return (
        <PageContainer className="flex h-[90vh] items-center w-full !overflow-y-hidden">
            <PaymentSuccessModal
                open={openSuccessModal}
                onOpenChange={setOnOpenSuccessModal}
                transaction={transactionFormSuccess}
                onClose={handleCloseSuccessModal}
            />
            <NoTransactionBatchWarningModal />
            <div className="hidden">
                <MemberPicker
                    modalState={{
                        open: openMemberPicker,
                        onOpenChange: setOpenMemberPicker,
                    }}
                    onSelect={(selectedMember) => {
                        setSelectedMember(selectedMember)
                    }}
                    placeholder="Select Member"
                />
            </div>

            {/* <TransactionPaymentEntryModal
                onOpenChange={(data) => {
                    if (!data) {
                        setSelectedAccountId(undefined)
                    }
                    return setOpenPaymentsEntryModal(false)
                }}
                open={openPaymentsEntryModal}
                className="max-w-3xl"
                formProps={{
                    referenceNumber: form.watch('reference_number'),
                    memberProfileId: selectedMember?.id,
                    memberJointId: selectedJointMember?.id,
                    isReferenceNumberCheck: isAutoGeneratedOR,
                    description: form.watch('description'),
                    transactionId: transactionId,

                    onSuccessPayment(transaction) {
                        setOpenPaymentsEntryModal(false)
                        queryClient.invalidateQueries({
                            queryKey: [
                                'member-accounting-ledger',
                                transaction.member_profile_id,
                                'resource-query',
                            ],
                        })
                        queryClient.invalidateQueries({
                            queryKey: ['get-transaction-by-id', transactionId],
                        })

                        queryClient.invalidateQueries({
                            queryKey: ['current-transaction-list'],
                        })

                        setSelectedMember(transaction.member_profile)
                        handleOnSuccessPaymentCallBack(transaction)
                        handleSetTransactionId(transactionId)
                    },
                    onSuccess(transaction) {
                        queryClient.invalidateQueries({
                            queryKey: [
                                'member-accounting-ledger',
                                transaction.member_profile_id,
                                'resource-query',
                            ],
                        })

                        queryClient.invalidateQueries({
                            queryKey: ['get-transaction-by-id', transactionId],
                        })

                        queryClient.invalidateQueries({
                            queryKey: ['current-transaction-list'],
                        })
                        
                        setFocusTypePayment('payment')
                        setSelectedMember(transaction.member_profile)
                        handleSetTransactionId(transaction.transaction_id)
                        handleOnSuccessPaymentCallBack(transaction)
                    },
                }}
            /> */}
            <PaymentWithTransactionModal
                open={openPaymentWithTransactionModal}
                title={quickPaymentTitle}
                className="max-w-3xl"
                onOpenChange={setOpenPaymentWithTransactionModal}
                formProps={{
                    transactionId,
                    referenceNumber: form.watch('reference_number'),
                    memberProfileId: selectedMember?.id,
                    memberJointId: selectedJointMember?.id,
                    isReferenceNumberCheck: isAutoGeneratedOR,
                    description: form.watch('description'),
                    defaultValues: {
                        entry_date: new Date().toISOString(),
                        account_id: selectedAccountId,
                    },
                    onSuccess(transaction) {
                        queryClient.invalidateQueries({
                            queryKey: [
                                'member-accounting-ledger',
                                'resource-query',
                                'member',
                                transaction.member_profile_id,
                            ],
                        })

                        queryClient.invalidateQueries({
                            queryKey: ['get-transaction-by-id', transactionId],
                        })
                        queryClient.invalidateQueries({
                            queryKey: ['current-transaction-list'],
                        })
                        form.setValue('reference_number', userSettingOR)
                        setOpenPaymentWithTransactionModal(false)
                        setSelectedMember(transaction.member_profile)
                        handleSetTransactionId(transaction.transaction_id)
                        handleOnSuccessPaymentCallBack(transaction)
                    },
                }}
            />

            <div className="flex h-full w-full over-flow-y-auto ">
                <ResizablePanelGroup
                    direction="vertical"
                    className="grow px-5 flex !overflow-y-auto"
                >
                    <ResizablePanel
                        defaultSize={50}
                        maxSize={50}
                        className="p-2 !h-fit !overflow-y-auto ecoop-scroll"
                    >
                        <div className="flex w-full bg-secondary/10 p-5 rounded-2xl flex-col gap-y-2">
                            <NoMemberSelectedView
                                onClick={(e) => {
                                    e.preventDefault()
                                    setOpenMemberPicker(true)
                                }}
                                disabledSelectTrigger={hasSelectedTransactionId}
                                isDisplay={!hasSelectedMember}
                            />{' '}
                            <MemberProfileTransactionView
                                memberInfo={selectedMember}
                                onSelectMember={() => {
                                    setOpenMemberPicker(true)
                                }}
                                hasTransaction={hasSelectedTransactionId}
                            />
                            <Form {...form}>
                                <form onSubmit={onSubmit} className="min-h-fit">
                                    <div className="flex  items-center h-fit space-x-2 w-full">
                                        <FormFieldWrapper
                                            control={form.control}
                                            name="reference_number"
                                            labelClassName="text-xs font-medium text-muted-foreground"
                                            render={({ field }) => (
                                                <div className="flex flex-col">
                                                    <Label
                                                        className="text-xs font-medium text-muted-foreground"
                                                        htmlFor={field.name}
                                                    >
                                                        Reference Number:
                                                        <Button
                                                            size={'sm'}
                                                            variant={'ghost'}
                                                            onClick={(e) => {
                                                                e.preventDefault()
                                                                setIsAutoGeneratedOR(
                                                                    (
                                                                        isAutoGeneratedOR
                                                                    ) =>
                                                                        !isAutoGeneratedOR
                                                                )
                                                                handleSetOR()
                                                            }}
                                                            className="text-muted-foreground text-xs relative hover:bg-transparent"
                                                        >
                                                            generate OR{' '}
                                                            {isAutoGeneratedOR && (
                                                                <span className="size-1.5 bg-green-400 absolute right-1 top-2 rounded-full" />
                                                            )}
                                                        </Button>
                                                    </Label>
                                                    <ReferenceNumber
                                                        {...field}
                                                        id={field.name}
                                                        placeholder="Reference Number"
                                                        autoComplete="reference-number"
                                                        value={
                                                            field.value ||
                                                            referenceNumber ||
                                                            ''
                                                        }
                                                        onChange={
                                                            field.onChange
                                                        }
                                                        disabled={
                                                            (!referenceNotEqual &&
                                                                !transaction) ||
                                                            isAutoGeneratedOR
                                                        }
                                                    />
                                                </div>
                                            )}
                                        />
                                        <FormFieldWrapper
                                            control={form.control}
                                            name="description"
                                            className="grow h-full translate-y-1"
                                            label="Description"
                                            labelClassName="text-xs font-medium text-muted-foreground"
                                            render={({ field }) => (
                                                <div className="flex space-x-2 ">
                                                    <Textarea
                                                        {...field}
                                                        id={field.name}
                                                        disabled={
                                                            !hasSelectedTransactionId
                                                        }
                                                        value={
                                                            field.value ||
                                                            description ||
                                                            ''
                                                        }
                                                        autoComplete="off"
                                                        className="grow h-10 min-h-10 resize-none"
                                                        placeholder="Description"
                                                    />
                                                    {hasSelectedTransactionId && (
                                                        <div className="flex space-x-1">
                                                            <Button
                                                                variant="destructive"
                                                                className=""
                                                                disabled={
                                                                    !referenceNotEqual &&
                                                                    !descriptionNotEqual
                                                                }
                                                                size="icon"
                                                                onClick={() =>
                                                                    handleResetForm()
                                                                }
                                                            >
                                                                <XIcon className="" />
                                                            </Button>
                                                            {(referenceNotEqual ||
                                                                descriptionNotEqual) && (
                                                                <Button
                                                                    variant="secondary"
                                                                    className=""
                                                                    type="submit"
                                                                    disabled={
                                                                        isLoadingUpdateReferenceNumber
                                                                    }
                                                                >
                                                                    {isLoadingUpdateReferenceNumber ? (
                                                                        <LoadingSpinner className="animate-spin" />
                                                                    ) : (
                                                                        'save'
                                                                    )}
                                                                </Button>
                                                            )}
                                                        </div>
                                                    )}
                                                </div>
                                            )}
                                        />
                                    </div>
                                </form>
                            </Form>
                        </div>
                    </ResizablePanel>
                    <ResizableHandle withHandle />
                    <ResizablePanel className="p-2 h-full !overflow-y-auto ecoop-scroll">
                        <div className="w-full p-2">
                            <MemberAccountingLedgerTable
                                mode="member"
                                memberProfileId={
                                    (selectedMember?.id ??
                                        undefined) as TEntityId
                                }
                                onRowClick={(data) => {
                                    setOpenPaymentWithTransactionModal(true)
                                    setSelectedAccountId(
                                        data.original.account_id
                                    )
                                    setFocusTypePayment('payment')
                                }}
                                actionComponent={(props) => {
                                    return (
                                        <MemberAccountGeneralLedgerAction
                                            memberAccountLedger={
                                                props.row.original
                                            }
                                        />
                                    )
                                }}
                                className="w-full"
                            />
                        </div>
                    </ResizablePanel>
                </ResizablePanelGroup>
                <div className="ecoop-scroll w-[40%] py-2">
                    <TransactionCardList fullPath={Route.fullPath} />
                    <TransactionActions
                        paymentLabel="Add Payment"
                        paymentOnClick={() => {
                            setFocusTypePayment('payment')
                            setOpenPaymentWithTransactionModal(true)
                        }}
                        PaymentButtonProps={{
                            disabled:
                                !hasSelectedMember || !hasTransactionBatch,
                        }}
                        DepositButtonProps={{
                            disabled:
                                !hasSelectedMember || !hasTransactionBatch,
                        }}
                        withdrawButtonProps={{
                            disabled:
                                !hasSelectedMember || !hasTransactionBatch,
                        }}
                        depositOnClick={() => {
                            setFocusTypePayment('deposit')
                            setOpenPaymentWithTransactionModal(true)
                        }}
                        withdrawOnClick={() => {
                            setFocusTypePayment('withdraw')
                            setOpenPaymentWithTransactionModal(true)
                        }}
                    />
                    {hasSelectedTransactionId && (
                        <Button
                            size="sm"
                            variant={'secondary'}
                            onClick={(e) => {
                                e.preventDefault()
                                handleResetAll()
                            }}
                            className="w-full mb-2"
                        >
                            <ResetIcon className="mr-2" />
                            reset current transaction
                        </Button>
                    )}
                    <CurrentPaymentsEntry
                        totalAmount={transaction?.amount}
                        transactionId={transactionId}
                    />
                </div>
            </div>
        </PageContainer>
    )
}
