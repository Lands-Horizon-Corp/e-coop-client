import { useQueryClient } from '@tanstack/react-query'
import { z } from 'zod'

import { zodResolver } from '@hookform/resolvers/zod'

import { useImagePreview } from '@/store/image-preview-store'
import { useTransactionStore } from '@/store/transaction/payments-entry-store'
import { useForm } from 'react-hook-form'

import PaymentWithTransactionModal from '@/components/forms/transaction-forms/create-payment-with-transaction-form'
import { MoneyIcon, XIcon } from '@/components/icons'
import MemberPicker from '@/components/pickers/member-picker'
import LoadingSpinner from '@/components/spinners/loading-spinner'
import { Button } from '@/components/ui/button'
import { Form } from '@/components/ui/form'
import FormFieldWrapper from '@/components/ui/form-field-wrapper'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'

import {
    useGetTransactionById,
    useUpdateReferenceNumber,
} from '@/hooks/api-hooks/use-transaction'
import { useTransactionShortcuts } from '@/hooks/shortcut-hooks/payments-entry-shortcuts'
import { useGetUserSettings } from '@/hooks/use-get-use-settings'

import { IGeneralLedger, TEntityId } from '@/types'

import ReferenceNumber from './reference-number-field'

const updateTransactionOR = z.object({
    reference_number: z.string().min(1, 'Reference number is required'),
    description: z.string().max(250, 'Description is required'),
})

type FormValues = z.infer<typeof updateTransactionOR>

type TransactionFormProps = {
    transactionId: TEntityId
    handleSetTransactionId: (transactionId?: TEntityId) => void
    hasSelectedMember: boolean
    hasSelectedTransactionId: boolean
}

const TransactionForm = ({
    transactionId,
    hasSelectedTransactionId,
    handleSetTransactionId,
    hasSelectedMember,
}: TransactionFormProps) => {
    const queryClient = useQueryClient()
    const { userSettingOR } = useGetUserSettings()

    const {
        selectedMember,
        openSuccessModal,
        focusTypePayment,
        openMemberPicker,
        selectedAccountId,
        isAutoGeneratedOR,
        selectedJointMember,
        openPaymentWithTransactionModal,
        handleResetAll,
        setSelectedMember,
        setFocusTypePayment,
        setOpenMemberPicker,
        setOpenSuccessModal,
        setSelectedAccountId,
        setIsAutoGeneratedOR,
        setTransactionFormSuccess,
        setOpenPaymentWithTransactionModal,
    } = useTransactionStore()

    const { isOpen } = useImagePreview()

    const form = useForm<FormValues>({
        resolver: zodResolver(updateTransactionOR),
        defaultValues: {
            reference_number: userSettingOR,
            description: '',
        },
    })

    const {
        mutate: updateReferenceNumber,
        isPending: isLoadingUpdateReferenceNumber,
    } = useUpdateReferenceNumber()

    const { data: transaction } = useGetTransactionById({
        transactionId,
        enabled: !!transactionId,
        onSuccess: (transaction) => {
            form.setValue(
                'reference_number',
                transaction?.reference_number || ''
            )
            form.setValue('description', transaction?.description || '')
            setSelectedMember?.(transaction?.member_profile)
        },
    })

    const referenceNumber = transaction?.reference_number || ''
    const description = transaction?.description || ''

    const onSubmit = form.handleSubmit((values: FormValues) => {
        if (transaction) {
            updateReferenceNumber({
                transactionId: transaction.id,
                reference_number: values.reference_number,
                description: values.description,
            })
        }
    })
    const handleSetOR = () => {
        form.setValue('reference_number', userSettingOR)
    }

    const handleResetForm = () => {
        form.reset({
            reference_number: referenceNumber || '',
            description: description || '',
        })
        setIsAutoGeneratedOR?.(false)
        handleSetOR()
    }
    const handleOnSuccessPaymentCallBack = (transaction: IGeneralLedger) => {
        setTransactionFormSuccess(transaction)
        setOpenSuccessModal(true)
    }

    const referenceNotEqual = form.watch('reference_number') !== referenceNumber
    const descriptionNotEqual = form.watch('description') !== description

    const quickPaymentTitle = (
        <div className="flex items-center">
            <MoneyIcon className="mr-2" />
            <span className="font-bold">{`${focusTypePayment?.charAt(0).toUpperCase()}${focusTypePayment?.slice(1)}`}</span>
        </div>
    )

    useTransactionShortcuts({
        hasSelectedMember: hasSelectedMember,
        openPaymentWithTransactionModal,
        openSuccessModal,
        hasSelectedTransactionId: hasSelectedTransactionId,
        setOpenPaymentWithTransactionModal,
        setFocusTypePayment,
        handleResetAll: () => {
            handleResetAll()
            handleSetTransactionId(undefined)
            form.reset()
        },
        setOpenMemberPicker,
        setSelectedMember: () => {
            setSelectedMember(null)
        },
        isMediaOpen: isOpen,
    })

    return (
        <Form {...form}>
            <div className="hidden">
                <MemberPicker
                    modalState={{
                        open: openMemberPicker,
                        onOpenChange: setOpenMemberPicker,
                    }}
                    onSelect={(selectedMember) => {
                        setSelectedMember(selectedMember)
                        setTimeout(() => {
                            form.setFocus('reference_number')
                        }, 0)
                    }}
                    placeholder="Select Member"
                />
            </div>
            <PaymentWithTransactionModal
                open={openPaymentWithTransactionModal}
                title={quickPaymentTitle}
                className="max-w-3xl"
                onOpenChange={setOpenPaymentWithTransactionModal}
                formProps={{
                    transactionId,
                    referenceNumber: form.watch('reference_number'),
                    memberProfileId: selectedMember?.id,
                    memberJointId: selectedJointMember?.id,
                    isReferenceNumberCheck: isAutoGeneratedOR,
                    description: form.watch('description'),
                    defaultValues: {
                        entry_date: new Date().toISOString(),
                        account_id: selectedAccountId,
                    },
                    onSuccess(transaction) {
                        queryClient.invalidateQueries({
                            queryKey: [
                                'member-accounting-ledger',
                                'resource-query',
                                'member',
                                transaction.member_profile_id,
                            ],
                        })

                        queryClient.invalidateQueries({
                            queryKey: ['get-transaction-by-id', transactionId],
                        })
                        queryClient.invalidateQueries({
                            queryKey: ['current-transaction-list'],
                        })
                        form.setValue('reference_number', userSettingOR)
                        setOpenPaymentWithTransactionModal(false)
                        setSelectedMember(transaction.member_profile)
                        setSelectedAccountId(undefined)
                        handleSetTransactionId(transaction.transaction_id)
                        handleOnSuccessPaymentCallBack(transaction)
                    },
                }}
            />
            <form onSubmit={onSubmit} className="min-h-fit">
                <div className="flex  items-center h-fit space-x-2 w-full">
                    <FormFieldWrapper
                        control={form.control}
                        name="reference_number"
                        labelClassName="text-xs font-medium text-muted-foreground"
                        render={({ field }) => (
                            <div className="flex flex-col">
                                <Label
                                    className="text-xs font-medium text-muted-foreground"
                                    htmlFor={field.name}
                                >
                                    Reference Number:
                                    <Button
                                        size={'sm'}
                                        variant={'ghost'}
                                        onClick={(e) => {
                                            e.preventDefault()
                                            setIsAutoGeneratedOR?.(
                                                !isAutoGeneratedOR
                                            )
                                            handleSetOR?.()
                                        }}
                                        className="text-muted-foreground text-xs relative hover:bg-transparent"
                                    >
                                        generate OR{' '}
                                        {isAutoGeneratedOR && (
                                            <span className="size-1.5 bg-green-400 absolute right-1 top-2 rounded-full" />
                                        )}
                                    </Button>
                                </Label>
                                <ReferenceNumber
                                    {...field}
                                    id={field.name}
                                    ref={field.ref}
                                    placeholder="Reference Number"
                                    value={field.value || referenceNumber || ''}
                                    onChange={field.onChange}
                                    disabled={
                                        (!referenceNotEqual && !transaction) ||
                                        isAutoGeneratedOR
                                    }
                                />
                            </div>
                        )}
                    />
                    <FormFieldWrapper
                        control={form.control}
                        name="description"
                        className="grow h-full translate-y-1"
                        label="Description"
                        labelClassName="text-xs font-medium text-muted-foreground"
                        render={({ field }) => (
                            <div className="flex space-x-2 ">
                                <Textarea
                                    {...field}
                                    id={field.name}
                                    disabled={!hasSelectedTransactionId}
                                    value={field.value || description || ''}
                                    autoComplete="off"
                                    className="grow h-10 min-h-10 resize-none"
                                    placeholder="Description"
                                />
                                {hasSelectedTransactionId && (
                                    <div className="flex space-x-1">
                                        <Button
                                            variant="destructive"
                                            className=""
                                            disabled={
                                                !referenceNotEqual &&
                                                !descriptionNotEqual
                                            }
                                            size="icon"
                                            onClick={() => handleResetForm?.()}
                                        >
                                            <XIcon className="" />
                                        </Button>
                                        {(referenceNotEqual ||
                                            descriptionNotEqual) && (
                                            <Button
                                                variant="secondary"
                                                className=""
                                                type="submit"
                                                disabled={
                                                    isLoadingUpdateReferenceNumber
                                                }
                                            >
                                                {isLoadingUpdateReferenceNumber ? (
                                                    <LoadingSpinner className="animate-spin" />
                                                ) : (
                                                    'save'
                                                )}
                                            </Button>
                                        )}
                                    </div>
                                )}
                            </div>
                        )}
                    />
                </div>
            </form>
        </Form>
    )
}

export default TransactionForm
