import { useCallback, useState } from 'react'

import { toast } from 'sonner'

import { serverRequestErrExtractor } from '@/helpers/error-message-extractor'
import { cn } from '@/helpers/tw-utils'
import {
    IQRMemberProfile,
    IQRMemberProfileDecodedResult,
} from '@/modules/qr-crypto'

import { ChevronRightIcon, ScanLineIcon } from '@/components/icons'
import Modal, { IModalProps } from '@/components/modals/modal'
import LoadingSpinner from '@/components/spinners/loading-spinner'
import { Button } from '@/components/ui/button'
import FormErrorMessage from '@/components/ui/form-error-message'

import { useQeueryHookCallback } from '@/hooks/use-query-hook-cb'
import { useSimpleShortcut } from '@/hooks/use-simple-shortcut'

import { IBaseProps, TEntityId } from '@/types'

import { IMemberProfile, useGetMemberProfileById } from '..'
import QrCodeScanner from '../../../components/qrcode-scanner'
import MemberProfileQrResultCard from './member-profile-qr-result-card'

interface MemberQrScannerProps extends IBaseProps {
    onSelectMemberProfile: (memberProfile: IMemberProfile) => void
    onResultFound?: (memberProfile: IMemberProfile) => void
    hideButton?: boolean
}

const MemberQrScanner = ({
    className,
    onResultFound,
    onSelectMemberProfile,
    hideButton,
}: MemberQrScannerProps) => {
    const [decodedMemberProfile, setDecodedMemberProfile] = useState<
        IQRMemberProfile | undefined
    >()

    const focusedId = decodedMemberProfile?.member_profile_id

    const {
        data,
        isPending,
        isError,
        error: rawError,
        isSuccess,
    } = useGetMemberProfileById({
        id: focusedId as TEntityId,
        options: {
            enabled: focusedId !== undefined && focusedId !== null,
        },
    })

    const handleSuccess = useCallback(
        (data: IMemberProfile) => {
            onResultFound?.(data)
        },
        [onResultFound]
    )

    useQeueryHookCallback({
        data,
        onSuccess: handleSuccess,
        error: rawError,
        isError,
        isSuccess,
    })

    const error = serverRequestErrExtractor({ error: rawError })

    useSimpleShortcut(['Enter'], () => {
        if (!data) return
        onSelectMemberProfile(data)
    })

    return (
        <div className={cn('size-fit', className)}>
            {decodedMemberProfile === undefined && (
                <div className="space-y-4">
                    <p>Scan Member QR</p>
                    <p className="text-muted-foreground/70 !mt-1 text-sm">
                        Only scan valid issued member profile QR generated by
                        E-Coop
                    </p>
                    <div className="min-h-[30rem] min-w-[30rem] space-y-4">
                        <QrCodeScanner<IQRMemberProfileDecodedResult>
                            allowMultiple
                            onSuccessDecode={(data) => {
                                if (data.type !== 'member-qr') {
                                    return toast.error(
                                        'Invalid QR. Please use a valid Member Profile QR'
                                    )
                                }

                                setDecodedMemberProfile(data.data)
                            }}
                        />
                    </div>
                </div>
            )}
            {isPending && decodedMemberProfile !== undefined && (
                <p className="text-muted-foreground/70">
                    <LoadingSpinner className="mx-auto inline mr-2" />
                    Loading member profile
                </p>
            )}
            {error && <FormErrorMessage errorMessage={error} />}
            {data && !isPending && (
                <div className="min-w-64 space-y-4">
                    <p>Found Member</p>
                    <p className="text-muted-foreground/70 !mt-1 text-sm">
                        Confirm if the member profile is correct.
                    </p>
                    <MemberProfileQrResultCard memberProfile={data} />
                    {!hideButton && (
                        <div className="grid grid-cols-2 gap-x-2 ">
                            <Button
                                onClick={() =>
                                    setDecodedMemberProfile(undefined)
                                }
                                size="sm"
                                variant="secondary"
                            >
                                Rescan <ScanLineIcon className="ml-2" />
                            </Button>
                            <Button
                                size="sm"
                                onClick={() => onSelectMemberProfile(data)}
                            >
                                Select <ChevronRightIcon className="ml-2" />
                            </Button>
                        </div>
                    )}
                </div>
            )}
        </div>
    )
}

export const MemberQrScannerModal = ({
    className,
    scannerProps,
    ...props
}: IModalProps & {
    scannerProps: Omit<MemberQrScannerProps, 'className'>
}) => {
    return (
        <Modal
            titleClassName="hidden"
            descriptionClassName="hidden"
            className={cn('size-fit', className)}
            {...props}
        >
            <MemberQrScanner
                {...scannerProps}
                onSelectMemberProfile={(selectedMemberProfile) => {
                    scannerProps?.onSelectMemberProfile?.(selectedMemberProfile)
                    props.onOpenChange?.(false)
                }}
            />
        </Modal>
    )
}

export default MemberQrScanner
