import { useQuery } from '@tanstack/react-query'
import qs from 'query-string'

import { Logger } from '@/helpers/loggers'
import {
    API,
    IUserOrganizationPaginated,
    createUserOrganization,
    deleteManyUserOrganization,
    deleteUserOrganizationById,
    userOrganizationAPIRoute,
} from '@/modules/user-organization'
import { HookQueryOptions } from '@/providers/repositories/data-layer-factory'
import {
    createMutationFactory,
    deleteMutationInvalidationFn,
} from '@/providers/repositories/mutation-factory'

import { TAPIQueryOptions, TEntityId } from '@/types'

import { IEmployee } from '../user'

/**
 * üëª Ghost Module: Employee
 * NOTE: This module has no backend entity/table.
 * It reuses user-organization endpoints/services/hooks under the hood.
 * Treat this as an adapter layer for employee-related UI/features.
 */

// important since we should not reuser user-organization's default baseQueryKey/baseKey
export const employeeBaseKey = 'employee'

// ‚öôÔ∏èüõ†Ô∏è API SERVICE STARTS HERE
const getPaginatedEmployees = async ({
    query,
    url,
}: {
    query?: TAPIQueryOptions
    url?: string
}) => {
    const newUrl = qs.stringifyUrl(
        {
            url: url || `${userOrganizationAPIRoute}/employee/search`,
            query,
        },
        { skipNull: true }
    )

    const response =
        await API.get<IUserOrganizationPaginated<IEmployee>>(newUrl)

    return response.data
}

// Directly reuse user-organization service for basic operations
// only export/wrap what needed
export const createEmployee = createUserOrganization
export const deleteEmployeeById = deleteUserOrganizationById
export const deleteManyEmployees = deleteManyUserOrganization

// ü™ù HOOKS STARTS HERE
// NOTE: Since this is a ghost module, do not use the HOOKS generated by user-organization since it has its own baseQueryKey, make ur own

export type TEmployeesPaginatedHookMode = 'employee' | 'owner'

export const useFilteredPaginatedEmployees = ({
    mode = 'employee',
    query,
    options,
}: {
    mode?: TEmployeesPaginatedHookMode
    query?: TAPIQueryOptions
    options?: HookQueryOptions<IUserOrganizationPaginated<IEmployee>, Error>
}) =>
    useQuery<IUserOrganizationPaginated<IEmployee>, Error>({
        ...options,
        queryKey: [employeeBaseKey, 'paginated', query, mode].filter(Boolean),
        queryFn: () => {
            const url = `${userOrganizationAPIRoute}/${mode}/search`
            return getPaginatedEmployees({ query, url })
        },
    })

export const useDeleteEmployeeById = createMutationFactory<
    void,
    Error,
    TEntityId
>({
    mutationFn: (id) => deleteEmployeeById({ id }),
    invalidationFn: (args) =>
        deleteMutationInvalidationFn(employeeBaseKey, args),
})

export const logger = Logger.getInstance('employee')
