import { useEffect } from 'react'

import { useForm } from 'react-hook-form'

import { zodResolver } from '@hookform/resolvers/zod'

import { AccordionTrigger } from '@radix-ui/react-accordion'

import { AccountPicker } from '@/modules/account'
import BankCombobox from '@/modules/bank/components/bank-combobox'
import { IGeneralLedger, TGeneralLedgerSource } from '@/modules/general-ledger'
import { IMedia } from '@/modules/media'
import { useGetAll } from '@/modules/payment-type'
import { IPaymentRequest } from '@/modules/quick-transfer'
import {
    ITransactionRequest,
    PaymentWithTransactionSchema,
    TPaymentWithTransactionFormValues,
    TransactionAmountField,
    TransactionPaymentTypeComboBox,
    useCreateTransactionPaymentByMode,
} from '@/modules/transaction'
import { useGetUserSettings } from '@/modules/user-profile'
import { useTransactionStore } from '@/store/transaction/transaction-store'

import LoadingSpinner from '@/components/spinners/loading-spinner'
import {
    Accordion,
    AccordionContent,
    AccordionItem,
} from '@/components/ui/accordion'
import { Button } from '@/components/ui/button'
import { Form } from '@/components/ui/form'
import FormErrorMessage from '@/components/ui/form-error-message'
import FormFieldWrapper from '@/components/ui/form-field-wrapper'
import ImageField from '@/components/ui/image-field'
import { Input } from '@/components/ui/input'
import InputDate from '@/components/ui/input-date'
import {
    Popover,
    PopoverContent,
    PopoverTrigger,
} from '@/components/ui/popover'
import SignatureField from '@/components/ui/signature-field'
import { Textarea } from '@/components/ui/textarea'

import { useShortcut } from '@/hooks/use-shorcuts'

import { IClassProps, IForm, TEntityId } from '@/types'

import ReferenceNumber from '../input/transaction-reference-number-field'

interface PaymentWithTransactionFormProps
    extends IClassProps,
        IForm<
            Partial<IPaymentRequest>,
            IGeneralLedger,
            string,
            TPaymentWithTransactionFormValues
        > {
    transactionId?: TEntityId
    memberProfileId?: TEntityId
    memberJointId?: TEntityId
}

const PaymentWithTransactionForm = ({
    defaultValues,
    onSuccess,
    transactionId,
    memberProfileId,
    memberJointId,
}: PaymentWithTransactionFormProps) => {
    const {
        focusTypePayment,
        setIsAutoGeneratedOR,
        isAutoGeneratedOR,
        selectedAccount,
    } = useTransactionStore()
    const {
        userSettingOR,
        settings_accounting_payment_default_value,
        settings_accounting_payment_default_value_id,
        settings_payment_type_default_value_id,
    } = useGetUserSettings()

    const form = useForm<TPaymentWithTransactionFormValues>({
        resolver: zodResolver(PaymentWithTransactionSchema),
        defaultValues: {
            ...defaultValues,
            account_id:
                settings_accounting_payment_default_value_id || undefined,
            account: settings_accounting_payment_default_value || undefined,
            payment_type_id:
                settings_payment_type_default_value_id || undefined,
            reference_number: userSettingOR,
            entry_date: new Date().toISOString(),
            description: '',
        },
    })

    useEffect(() => {
        if (selectedAccount) {
            form.setValue('account', selectedAccount)
            form.setValue('account_id', selectedAccount?.id)
        }
        form.setFocus('amount')
    }, [selectedAccount, form])

    const {
        mutate: creatTransactionDeposit,
        isPending,
        error,
    } = useCreateTransactionPaymentByMode({
        options: {
            onSuccess: (transaction) => {
                form.reset({
                    reference_number: userSettingOR,
                    description: '',
                    amount: undefined,
                    bank_id: undefined,
                    entry_date: undefined,
                    bank_reference_number: '',
                    proof_of_payment_media_id: undefined,
                    signature_media_id: undefined,
                })
                form.setValue('account', transaction.account || '')
                form.setValue('account_id', transaction?.account?.id ?? '')
                form.setValue(
                    'payment_type_id',
                    transaction.payment_type_id || ''
                )
                setIsAutoGeneratedOR(true)
                form.setFocus('amount')
                onSuccess?.(transaction)
            },
        },
    })

    const { data: paymentTypes } = useGetAll()

    const handleSubmit = form.handleSubmit(
        (data: TPaymentWithTransactionFormValues) => {
            const entryDate = data.entry_date
                ? new Date(data.entry_date).toISOString()
                : undefined

            const source: TGeneralLedgerSource =
                focusTypePayment === 'payment'
                    ? 'payment'
                    : focusTypePayment === 'withdraw'
                      ? 'withdraw'
                      : 'deposit'

            const transactionpayPayload: ITransactionRequest = {
                ...data,
                member_profile_id: memberProfileId,
                member_joint_account_id: memberJointId,
                source: source,
            }

            creatTransactionDeposit({
                data: {
                    ...data,
                    entry_date: entryDate,
                },
                mode: focusTypePayment,
                transactionId,
                transactionPayload: transactionpayPayload,
            })
        }
    )

    const paymentTypeType = paymentTypes?.find(
        (type) => type.id === form.watch('payment_type_id')
    )?.type

    const isOnlinePayment = ['bank', 'online', 'check'].includes(
        paymentTypeType?.toLowerCase() ?? ''
    )
    const handleSetOR = () => {
        form.setValue('reference_number', userSettingOR)
    }
    useShortcut('A', (e) => {
        form.setFocus('amount')
        e.preventDefault()
    })
    return (
        <Form {...form}>
            <form
                onSubmit={handleSubmit}
                className="flex flex-col lg:flex-row overflow-auto "
            >
                <div className=" overflow-y-auto ecoop-scroll flex-1 p-2">
                    <div className="min-w-[900px] grid grid-cols-1 gap-3 md:grid-cols-2 lg:grid-cols-4  ">
                        <FormFieldWrapper
                            control={form.control}
                            name="reference_number"
                            label="Reference Number"
                            className="relative"
                            labelClassName="text-xs font-medium relative text-muted-foreground"
                            render={({ field }) => (
                                <div className="flex flex-col ">
                                    <ReferenceNumber
                                        {...field}
                                        id={field.name}
                                        ref={field.ref}
                                        isAutoGenerate={isAutoGeneratedOR}
                                        isAutoOnClick={() => {
                                            setIsAutoGeneratedOR(
                                                !isAutoGeneratedOR
                                            )
                                            handleSetOR()
                                        }}
                                        placeholder="Reference Number"
                                        value={field.value}
                                        onChange={field.onChange}
                                        disabled={isAutoGeneratedOR}
                                    />
                                </div>
                            )}
                        />
                        <FormFieldWrapper
                            control={form.control}
                            name="amount"
                            label="Amount"
                            labelClassName="text-xs font-medium text-muted-foreground"
                            render={({ field }) => {
                                return (
                                    <TransactionAmountField
                                        isDefault
                                        {...field}
                                    />
                                )
                            }}
                        />
                        <FormFieldWrapper
                            control={form.control}
                            name="account_id"
                            label="Account"
                            labelClassName="text-xs font-medium text-muted-foreground"
                            render={({ field }) => (
                                <AccountPicker
                                    mode={focusTypePayment}
                                    value={form.watch('account')}
                                    onSelect={(account) => {
                                        field.onChange(account.id)
                                        form.setValue('account', account, {
                                            shouldDirty: true,
                                        })
                                    }}
                                    nameOnly
                                    placeholder="Select an account"
                                />
                            )}
                        />
                        <FormFieldWrapper
                            control={form.control}
                            label="Payment Type"
                            name="payment_type_id"
                            labelClassName="text-xs font-medium text-muted-foreground"
                            render={({ field }) => (
                                <TransactionPaymentTypeComboBox
                                    {...field}
                                    value={field.value ?? undefined}
                                    placeholder="Select a payment type"
                                    onChange={(selectedPaymentType) => {
                                        field.onChange(selectedPaymentType.id)
                                        if (isOnlinePayment) {
                                            form.setValue(
                                                'entry_date',
                                                new Date().toISOString(),
                                                {
                                                    shouldValidate: true,
                                                }
                                            )
                                        }
                                    }}
                                />
                            )}
                        />

                        {isOnlinePayment && (
                            <Popover open>
                                <PopoverTrigger className="absolute bottom-[62%] bg-sidebar left-0 "></PopoverTrigger>
                                <PopoverContent
                                    sideOffset={50}
                                    align="start"
                                    className="grid w-full grid-cols-5 gap-5 p-0 py-2 px-2 "
                                >
                                    <FormFieldWrapper
                                        control={form.control}
                                        labelClassName="text-xs font-medium relative text-muted-foreground"
                                        name="bank_id"
                                        label="Bank"
                                        render={({ field }) => (
                                            <BankCombobox
                                                {...field}
                                                value={field.value ?? undefined}
                                                placeholder="Select a bank"
                                                onChange={(selectedBank) =>
                                                    field.onChange(
                                                        selectedBank.id
                                                    )
                                                }
                                            />
                                        )}
                                    />
                                    <FormFieldWrapper
                                        control={form.control}
                                        name="entry_date"
                                        labelClassName="text-xs font-medium relative text-muted-foreground"
                                        label="Bank Date"
                                        className="relative"
                                        description="mm/dd/yyyy"
                                        descriptionClassName="absolute top-0 right-0"
                                        render={({ field }) => (
                                            <InputDate
                                                {...field}
                                                placeholder="Bank Date"
                                                className="block"
                                                value={field.value ?? ''}
                                            />
                                        )}
                                    />
                                    <FormFieldWrapper
                                        control={form.control}
                                        name="bank_reference_number"
                                        label="Bank Reference Number"
                                        labelClassName="text-xs font-medium relative text-muted-foreground"
                                        render={({ field }) => (
                                            <Input
                                                {...field}
                                                value={field.value ?? undefined}
                                                placeholder="add a bank reference number"
                                                onChange={field.onChange}
                                            />
                                        )}
                                    />
                                    <FormFieldWrapper
                                        control={form.control}
                                        name="proof_of_payment_media_id"
                                        labelClassName="text-xs font-medium relative text-muted-foreground"
                                        label="Proof of Payment"
                                        render={({ field }) => {
                                            const value = form.watch(
                                                'proof_of_payment_media'
                                            )
                                            return (
                                                <ImageField
                                                    {...field}
                                                    placeholder="Upload Photo"
                                                    className="!max-h-10"
                                                    isFieldView
                                                    value={
                                                        value
                                                            ? (value as IMedia)
                                                                  .download_url
                                                            : value
                                                    }
                                                    onChange={(newImage) => {
                                                        if (newImage) {
                                                            field.onChange(
                                                                newImage.id
                                                            )
                                                            form.setValue(
                                                                'proof_of_payment_media',
                                                                newImage as IMedia
                                                            )
                                                        } else {
                                                            field.onChange(
                                                                undefined
                                                            )
                                                            form.setValue(
                                                                'proof_of_payment_media',
                                                                undefined
                                                            )
                                                        }
                                                    }}
                                                />
                                            )
                                        }}
                                    />
                                </PopoverContent>
                            </Popover>
                        )}
                        <Accordion
                            type="single"
                            collapsible
                            className="w-full col-span-3 overflow-auto"
                            defaultValue="item-1"
                        >
                            <AccordionItem value="item-1 " className="border-0">
                                <AccordionTrigger className="text-sm text-primary underline-offset-4 hover:underline flex items-center gap-x-1 ">
                                    others
                                </AccordionTrigger>
                                <AccordionContent className="overflow-x-auto flex gap-x-2 ">
                                    <FormFieldWrapper
                                        control={form.control}
                                        name="description"
                                        label="Description"
                                        className="h-full col-span-2"
                                        render={({ field }) => (
                                            <Textarea
                                                {...field}
                                                id={field.name}
                                                value={field.value}
                                                placeholder="a short description..."
                                                autoComplete="off"
                                                className="!h-12 !max-h-20"
                                            />
                                        )}
                                    />
                                    <FormFieldWrapper
                                        control={form.control}
                                        name="signature_media_id"
                                        label="Signature"
                                        className="h-15"
                                        render={({ field }) => {
                                            const value =
                                                form.watch('signature')
                                            return (
                                                <SignatureField
                                                    {...field}
                                                    className="!max-h-15 min-h-15 "
                                                    placeholder="Signature"
                                                    hideIcon
                                                    value={
                                                        value
                                                            ? (value as IMedia)
                                                                  .download_url
                                                            : value
                                                    }
                                                    onChange={(newImage) => {
                                                        if (newImage) {
                                                            field.onChange(
                                                                newImage.id
                                                            )
                                                            form.setValue(
                                                                'signature',
                                                                newImage as IMedia
                                                            )
                                                        } else {
                                                            field.onChange(
                                                                undefined
                                                            )
                                                            form.setValue(
                                                                'signature',
                                                                undefined
                                                            )
                                                        }
                                                    }}
                                                />
                                            )
                                        }}
                                    />
                                </AccordionContent>
                            </AccordionItem>
                        </Accordion>
                        <FormErrorMessage
                            errorMessage={error ? error.message : null}
                        />
                    </div>
                </div>
                <div className="flex items-center justify-end gap-x-2">
                    <Button
                        size="sm"
                        type="button"
                        variant="ghost"
                        onClick={() => form.reset()}
                        className="w-full self-end px-8 sm:w-fit"
                    >
                        reset
                    </Button>
                    <Button
                        size="sm"
                        type="submit"
                        disabled={isPending}
                        className="w-full self-end px-8 sm:w-fit"
                    >
                        {isPending ? (
                            <LoadingSpinner />
                        ) : (
                            <>{focusTypePayment}</>
                        )}
                    </Button>
                </div>
            </form>
        </Form>
    )
}

export default PaymentWithTransactionForm
