import { Dispatch, SetStateAction } from 'react'

import { IAccount } from '@/modules/account'
import { IGeneralLedger } from '@/modules/general-ledger'
import { IMemberJointAccount } from '@/modules/member-joint-account'
import { IMemberProfile } from '@/modules/member-profile'
import { TPaymentMode } from '@/modules/transaction'
import { create } from 'zustand'

import { TEntityId } from '@/types'

export interface TransactionPropsStore {
    openMemberPicker: boolean
    focusTypePayment: TPaymentMode
    selectedMember: IMemberProfile | null
    openPaymentsEntryModal: boolean
    selectedAccountId: TEntityId | undefined
    isAutoGeneratedOR?: boolean
    selectedJointMember?: IMemberJointAccount | null
    openSuccessModal: boolean
    transactionFormSuccess: IGeneralLedger | null
    openPaymentWithTransactionModal: boolean
    focusedLedger:
        | {
              memberProfileId: TEntityId
              accountId: TEntityId
              account?: IAccount
          }
        | undefined
    selectedAccount?: IAccount

    setOpenMemberPicker: Dispatch<SetStateAction<boolean>>
    setFocusTypePayment: (payment: TPaymentMode) => void
    setSelectedMember: (member: IMemberProfile | null) => void
    setOpenPaymentsEntryModal: (open: boolean) => void
    setSelectedAccountId: (accountId: TEntityId | undefined) => void
    setIsAutoGeneratedOR: (isAutoGenerated: boolean) => void
    setSelectedJointMember: (jointMember: IMemberJointAccount | null) => void
    setOpenSuccessModal: (open: boolean) => void
    setTransactionFormSuccess: (transaction: IGeneralLedger | null) => void
    setOpenPaymentWithTransactionModal: (open: boolean) => void
    setSelectedAccount: (accountId?: IAccount) => void

    handleResetAll: () => void
    setFocusedLedger: (
        focused:
            | {
                  memberProfileId: TEntityId
                  accountId: TEntityId
                  account?: IAccount
              }
            | undefined
    ) => void
}

export const useTransactionStore = create<TransactionPropsStore>(
    (set, get) => ({
        focusTypePayment: 'payment',
        selectedMember: null,
        openPaymentsEntryModal: false,
        openMemberPicker: false,
        selectedAccountId: undefined,
        isAutoGeneratedOR: false,
        selectedJointMember: null,
        openSuccessModal: false,
        transactionFormSuccess: null,
        openPaymentWithTransactionModal: false,
        focusedLedger: undefined,
        selectedAccount: undefined,

        setSelectedAccountId: (accountId) =>
            set({ selectedAccountId: accountId }),
        setSelectedMember: (member) => set({ selectedMember: member }),
        setOpenPaymentsEntryModal: (open) =>
            set({ openPaymentsEntryModal: open }),
        setFocusTypePayment: (payment) =>
            set({
                focusTypePayment: payment,
                openPaymentWithTransactionModal: true,
            }),
        setOpenMemberPicker: (open) =>
            set({
                openMemberPicker:
                    typeof open === 'function'
                        ? open(get().openMemberPicker)
                        : open,
            }),
        setIsAutoGeneratedOR: (isAutoGenerated) =>
            set({ isAutoGeneratedOR: isAutoGenerated }),
        setSelectedJointMember: (jointMember) =>
            set({ selectedJointMember: jointMember }),
        setOpenSuccessModal: (open) => set({ openSuccessModal: open }),
        setTransactionFormSuccess: (transaction) =>
            set({ transactionFormSuccess: transaction }),
        setOpenPaymentWithTransactionModal: (open) =>
            set({ openPaymentWithTransactionModal: open }),

        handleResetAll: () =>
            set(() => ({
                focusTypePayment: 'payment',
                selectedMember: null,
                openPaymentsEntryModal: false,
                openMemberPicker: false,
                selectedAccountId: undefined,
                isAutoGeneratedOR: false,
                selectedJointMember: null,
                openSuccessModal: false,
                transactionFormSuccess: null,
                openPaymentWithTransactionModal: false,
            })),
        setFocusedLedger: (focused) => set({ focusedLedger: focused }),
        setSelectedAccount: (account) =>
            set({
                selectedAccount: account,
            }),
    })
)
